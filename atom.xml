<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaoMao&#39;s Blog</title>
  
  <subtitle>cat???</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-10T15:25:24.162Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MaoMao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buuctf_reverse_wp</title>
    <link href="http://example.com/2023/03/10/buuctf-reverse-wp/"/>
    <id>http://example.com/2023/03/10/buuctf-reverse-wp/</id>
    <published>2023-03-10T15:04:12.000Z</published>
    <updated>2023-03-10T15:25:24.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p>可以说是最入门入门入门的题了！</p><p>先把文件拖进die，PE64文件，拖进ida，一进去就看到了flag</p><p><img src="/pic/202303101.png" alt="flag"></p><p>flag{this_Is_a_EaSyRe}</p><h1 id="reverse-1"><a href="#reverse-1" class="headerlink" title="reverse_1"></a>reverse_1</h1><p>下载好文件之后拖进die，是PE64文件，拖进ida</p><p>一进去可以看到{hello_world}，但拿去buu发现不对，于是查看字符串，跟进</p><p><img src="/pic/202303103.png" alt="跟进"></p><p>可以看到只要与str2相同就行，所以看懂上面对str2进行的操作，把’o’换成’0’即可</p><p><img src="/pic/202303102.png" alt="进行操作"></p><p>flag{hell0_w0rld}</p><h1 id="reserve-2"><a href="#reserve-2" class="headerlink" title="reserve_2"></a>reserve_2</h1><p>拖进die，看到是elf64文件，拖进ida找到main函数，反编译</p><p><img src="/pic/202303104.png" alt="lookfor"></p><p>点进flag可以看到{hacking_for_fun}</p><p><img src="/pic/202303105.png" alt="cheatflag"></p><p>但对flag进行了操作，所以写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&quot;&#123;hacking_for_fun&#125;&quot;</span></span><br><span class="line">flag1=<span class="built_in">list</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span>(flag[i]==<span class="string">&#x27;i&#x27;</span>)<span class="keyword">or</span>(flag[i]==<span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">        flag1[i]=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span>.join(flag1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{hack1ng_fo1_fun}</p><h1 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h1><p>下载下来文件，拖进ide，是PE32文件，拖进ida</p><p>打开看到</p><p><img src="/pic/202303106.png" alt="lookfor"></p><p>{49d3c93df25caad81232130f3d2ebfad}即为flag </p><p>flag{49d3c93df25caad81232130f3d2ebfad}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;easyre&quot;&gt;&lt;a href=&quot;#easyre&quot; class=&quot;headerlink&quot; title=&quot;easyre&quot;&gt;&lt;/a&gt;easyre&lt;/h1&gt;&lt;p&gt;可以说是最入门入门入门的题了！&lt;/p&gt;
&lt;p&gt;先把文件拖进die，PE64文件，拖进ida，一进去就看到了f</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本语法</title>
    <link href="http://example.com/2023/03/10/Linux%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2023/03/10/Linux%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2023-03-10T14:59:19.000Z</published>
    <updated>2023-03-10T15:00:05.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进入终端：点击鼠标右键再点击Open-Terminals"><a href="#进入终端：点击鼠标右键再点击Open-Terminals" class="headerlink" title="进入终端：点击鼠标右键再点击Open Terminals"></a>进入终端：点击鼠标右键再点击Open Terminals</h1><p>ls：查看当前目录下的文件和文件夹   即list的缩写，列出文件和文件夹  注意：在Linux系统下，在文件名或者文件夹名前加点号(如.config)会隐藏该文件，这时候我们可以使用ls -a看到所有文件，包括被隐藏的文件或文件夹）</p><p>cd：切换文件路径，进入某个文件夹  即change directory，改变工作目录  （cd ..回到上一级目录）</p><p>pwd：查看当前工作目录  即Print Working Directory的缩写</p><p>通过在键盘点击上下可以在命令行中显示你曾经输入过的指令（在命令行中输入history查看最近输入的指令）</p><p>一般来说虚拟机里复制键是shift+ctrl+c，粘贴键是shift+ctrl+v</p><p>对某个文件输入命令时按下tab键可以补全文件名</p><p>mkdir：新建文件夹  make directory的缩写</p><p>touch: 创建文本文件</p><p>rm：删除指定文件  remove的缩写</p><p>#rm -r：删除指定文件夹</p><p>##rm -rf &#x2F;*：删库跑路(很可能跑不掉)</p><p> cp：复制 cp &lt;文件路径&gt; &lt;目标路径&gt;</p><p>mv：移动文件或修改文件名（根据第二个参数决定是移动文件还是修改文件名）</p><p>mv yyz.txt 233.txt    #重命名yyz.txt为 233.txt</p><p>mv 233.txt ..        #将文件 a.txt移动到上一级目录中</p><p>tar -zxvf 文件名   解压命令，相信如果同学们按照我的教程装过vm tool的话对它已经很熟悉了。</p><p>clear  顾名思义，清屏命令</p><p>cmatrix：伪装大haker</p><h1 id="vim一般有6种工作模式"><a href="#vim一般有6种工作模式" class="headerlink" title="vim一般有6种工作模式"></a>vim一般有6种工作模式</h1><h5 id="普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。"><a href="#普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。" class="headerlink" title="普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。"></a>普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。</h5><h5 id="插入模式：也可以叫做编辑模式，在普通模式下敲击-i-、a-或-o-就进入插入模式，允许用户通过键盘输入、编辑。"><a href="#插入模式：也可以叫做编辑模式，在普通模式下敲击-i-、a-或-o-就进入插入模式，允许用户通过键盘输入、编辑。" class="headerlink" title="插入模式：也可以叫做编辑模式，在普通模式下敲击 i 、a 或 o 就进入插入模式，允许用户通过键盘输入、编辑。"></a>插入模式：也可以叫做编辑模式，在普通模式下敲击 i 、a 或 o 就进入插入模式，允许用户通过键盘输入、编辑。</h5><h5 id="命令行模式：在普通模式下，先输入冒号-，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到-x2F-etc-x2F-vim-x2F-vimrc配置文件中，每次打开默认配置执行。"><a href="#命令行模式：在普通模式下，先输入冒号-，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到-x2F-etc-x2F-vim-x2F-vimrc配置文件中，每次打开默认配置执行。" class="headerlink" title="命令行模式：在普通模式下，先输入冒号:，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到&#x2F;etc&#x2F;vim&#x2F;vimrc配置文件中，每次打开默认配置执行。"></a>命令行模式：在普通模式下，先输入冒号:，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到&#x2F;etc&#x2F;vim&#x2F;vimrc配置文件中，每次打开默认配置执行。</h5><h5 id="可视化模式：在普通模式下敲击前盘上的-v-键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。"><a href="#可视化模式：在普通模式下敲击前盘上的-v-键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。" class="headerlink" title="可视化模式：在普通模式下敲击前盘上的 v 键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。"></a>可视化模式：在普通模式下敲击前盘上的 v 键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。</h5><h5 id="替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。"><a href="#替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。" class="headerlink" title="替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。"></a>替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。</h5><h5 id="EX模式：类似于命令行模式，可以一次运行多个命令"><a href="#EX模式：类似于命令行模式，可以一次运行多个命令" class="headerlink" title="EX模式：类似于命令行模式，可以一次运行多个命令"></a>EX模式：类似于命令行模式，可以一次运行多个命令</h5><h5 id="vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。"><a href="#vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。" class="headerlink" title="vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。"></a>vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。</h5><h1 id="Man-Page-常用操作"><a href="#Man-Page-常用操作" class="headerlink" title="Man Page 常用操作"></a>Man Page 常用操作</h1><h4 id="Man常用的快捷键："><a href="#Man常用的快捷键：" class="headerlink" title="Man常用的快捷键："></a>Man常用的快捷键：</h4><p>•q 退出</p><p>•Enter 按行下翻</p><p>•Space|f 按页下翻</p><p>•b 上翻一页</p><p>•h 查看帮助文档</p><h4 id="Man常用的命令："><a href="#Man常用的命令：" class="headerlink" title="Man常用的命令："></a>Man常用的命令：</h4><p>•g [n] 跳转到第一行|跳转到第n行</p><p>•G 跳转到最后一行</p><p>•&#x2F;搜索内容：</p><p>•n 跳转到下一个匹配的搜索</p><p>•N 跳转到上一个匹配的搜索</p><h3 id="Man-page的分类"><a href="#Man-page的分类" class="headerlink" title="Man page的分类"></a>Man page的分类</h3><h4 id="man总共有9种分类"><a href="#man总共有9种分类" class="headerlink" title="man总共有9种分类"></a>man总共有9种分类</h4><h5 id="越小的分类其查找时默认优先度越高"><a href="#越小的分类其查找时默认优先度越高" class="headerlink" title="越小的分类其查找时默认优先度越高"></a>越小的分类其查找时默认优先度越高</h5><p>1.可执行程序或shell命令</p><p>2.系统调用(内核提供的函数)   </p><p>3.库调用（库提供的函数）</p><p>4.特殊文件（通常位于&#x2F;dev）</p><p>5.文件格式和约定，如&#x2F;etc&#x2F;passwd</p><p>6.游戏</p><p>7.杂项（包括宏包和规范如man(7))</p><p>8.系统管理命令，只针对root用户</p><p>9.内核例程</p><h5 id="有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令"><a href="#有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令" class="headerlink" title="有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令"></a>有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令</h5><p>解决方法：</p><p> man manpath.1</p><p> man manpath.5</p><p>即 man xxxx.index</p><h1 id="Linux根目录"><a href="#Linux根目录" class="headerlink" title="Linux根目录"></a>Linux根目录</h1><h5 id="x2F-bin-此目录存放所有用户的命令"><a href="#x2F-bin-此目录存放所有用户的命令" class="headerlink" title="&#x2F;bin   此目录存放所有用户的命令"></a>&#x2F;bin   此目录存放所有用户的命令</h5><h5 id="x2F-boot-Linux内核及引导系统程序所需的文件"><a href="#x2F-boot-Linux内核及引导系统程序所需的文件" class="headerlink" title="&#x2F;boot   Linux内核及引导系统程序所需的文件"></a>&#x2F;boot   Linux内核及引导系统程序所需的文件</h5><h5 id="x2F-dev-所有设备文件的目录（如声卡、磁盘、光驱）"><a href="#x2F-dev-所有设备文件的目录（如声卡、磁盘、光驱）" class="headerlink" title="&#x2F;dev   所有设备文件的目录（如声卡、磁盘、光驱）"></a>&#x2F;dev   所有设备文件的目录（如声卡、磁盘、光驱）</h5><p>该目录用于访问设备，其中不仅包括了计算机的真实设备，如硬盘、网卡等设备，同时也有一些有趣的伪设备</p><p>n&#x2F;dev&#x2F;null        “黑洞”，写入的一切数据都会被丢弃</p><p>n&#x2F;dev&#x2F;random     真随机数生成器，可读取随机数据流，随机度高但是慢</p><p>n&#x2F;dev&#x2F;urandom    伪随机数，同上，但是随机度低但速度快</p><p>n&#x2F;dev&#x2F;zero        “零”生成器，可以取到连续不断的0值</p><p>n&#x2F;dev&#x2F;tty  指向当前终端</p><h5 id="x2F-etc-主要存放了系统配置方面的文件"><a href="#x2F-etc-主要存放了系统配置方面的文件" class="headerlink" title="&#x2F;etc   主要存放了系统配置方面的文件"></a>&#x2F;etc   主要存放了系统配置方面的文件</h5><h5 id="x2F-home-各个用户的家目录"><a href="#x2F-home-各个用户的家目录" class="headerlink" title="&#x2F;home   各个用户的家目录"></a>&#x2F;home   各个用户的家目录</h5><h5 id="x2F-lib-库文件存放目录"><a href="#x2F-lib-库文件存放目录" class="headerlink" title="&#x2F;lib   库文件存放目录"></a>&#x2F;lib   库文件存放目录</h5><h5 id="x2F-lost-found-当系统意外崩溃或意外关机时-用于修复的文件碎片"><a href="#x2F-lost-found-当系统意外崩溃或意外关机时-用于修复的文件碎片" class="headerlink" title="&#x2F;lost+found   当系统意外崩溃或意外关机时,用于修复的文件碎片"></a>&#x2F;lost+found   当系统意外崩溃或意外关机时,用于修复的文件碎片</h5><h5 id="x2F-mnt-用于临时挂载存储设备"><a href="#x2F-mnt-用于临时挂载存储设备" class="headerlink" title="&#x2F;mnt   用于临时挂载存储设备"></a>&#x2F;mnt   用于临时挂载存储设备</h5><h5 id="x2F-var-存放内容常变动的文件目录"><a href="#x2F-var-存放内容常变动的文件目录" class="headerlink" title="&#x2F;var   存放内容常变动的文件目录"></a>&#x2F;var   存放内容常变动的文件目录</h5><h5 id="x2F-opt-自定义软件安装存放目录"><a href="#x2F-opt-自定义软件安装存放目录" class="headerlink" title="&#x2F;opt   自定义软件安装存放目录"></a>&#x2F;opt   自定义软件安装存放目录</h5><h5 id="x2F-proc-进程及内核信息存放目录。"><a href="#x2F-proc-进程及内核信息存放目录。" class="headerlink" title="&#x2F;proc   进程及内核信息存放目录。"></a>&#x2F;proc   进程及内核信息存放目录。</h5><p>该目录下一个个进程以其pid作为文件夹名放在该目录下，还有一些设备参数的读取</p><p>&#x2F;proc&#x2F;cpuinfo 本机的 CPU 的相关信息，包含频率、类型与运算功能等</p><p>&#x2F;proc&#x2F;devices 这个文件记录了系统各个主要设备的主要设备代号，与 mknod 有关</p><p>&#x2F;proc&#x2F;filesystems 目前系统已经载入的文件系统</p><p>&#x2F;proc&#x2F;version 核心的版本，就是用 uname -a 显示的内容啦！</p><h5 id="x2F-root-root用户家目录"><a href="#x2F-root-root用户家目录" class="headerlink" title="&#x2F;root   root用户家目录"></a>&#x2F;root   root用户家目录</h5><h5 id="x2F-tmp-临时文件目录"><a href="#x2F-tmp-临时文件目录" class="headerlink" title="&#x2F;tmp   临时文件目录"></a>&#x2F;tmp   临时文件目录</h5><h5 id="x2F-usr-系统存放程序的目录"><a href="#x2F-usr-系统存放程序的目录" class="headerlink" title="&#x2F;usr   系统存放程序的目录"></a>&#x2F;usr   系统存放程序的目录</h5><h5 id="x2F-sbin-给root用户使用的命令"><a href="#x2F-sbin-给root用户使用的命令" class="headerlink" title="&#x2F;sbin   给root用户使用的命令"></a>&#x2F;sbin   给root用户使用的命令</h5><h5 id="x2F-sys-系统内核参数"><a href="#x2F-sys-系统内核参数" class="headerlink" title="&#x2F;sys   系统内核参数"></a>&#x2F;sys   系统内核参数</h5><h1 id="Linux树形结构的文件系统——路径"><a href="#Linux树形结构的文件系统——路径" class="headerlink" title="Linux树形结构的文件系统——路径"></a>Linux树形结构的文件系统——路径</h1><p>为了方便地访问文件夹，我们使用一个字符串来标识对文件的访问，这个字符串就是路径。</p><p>与windows用\分割路径的方式不同，Linux下采用&#x2F;分割不同的文件夹</p><h1 id="Linux文件系统——树形结构"><a href="#Linux文件系统——树形结构" class="headerlink" title="Linux文件系统——树形结构"></a>Linux文件系统——树形结构</h1><p>•不同于windows系统采用盘符的机制来描述文件系统，Linux和macOS这类Unix系统采用挂载点的方式描述文件</p><p>•操作路径系统，通常使用树形抽象。</p><p>•只不过Linux这一棵路径树，只有一个根节点&#x2F;，</p><p>根文件系统就挂载在这根目录下面&#x2F;。</p><p>•既然没有盘符系统，那么怎么添加多个文件系</p><p>统呢？不同的文件系统，以文件夹的形式，挂载</p><p>在已有文件系统的某一个文件夹下面。</p><h1 id="Linux-链接"><a href="#Linux-链接" class="headerlink" title="Linux 链接"></a>Linux 链接</h1><p>•在Linux系统中有一种特殊的文件类型叫链接。</p><h3 id="•链接分为两种："><a href="#•链接分为两种：" class="headerlink" title="•链接分为两种："></a>•链接分为两种：</h3><h4 id="硬链接："><a href="#硬链接：" class="headerlink" title="硬链接："></a>硬链接：</h4><p>硬链接和原文件必须处于同一个文件系统，删除源文件对硬链接不会有影响，硬链接和原链接实际上是对同一份数据的两个引用，同时无法建立文件夹的硬链接。</p><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>又叫符号链接，它类似快捷方式，指向一个路径，因此可以跨文件系统建立，当原文件被删除时，软链接也无法取得数据</p><p><strong>ln [-s]</strong> <strong>原文件路径 目标文件路径</strong>  </p><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="# ls -l"></a><strong># ls -l</strong></h3><p>drwxrw-r-x <strong>2</strong> roo root 0 Sept 1 16:09 redrock   <strong>硬链接</strong>|<strong>文件数量</strong></p><p>drwxrw-r-x 2 root root <strong>5</strong> Sept 1 16:09 redrock   <strong>文件大小</strong></p><p>dwxrw-r-x 2 root root 5 <strong>Sept 1 16:09</strong> redrock   <strong>最后修改时间</strong></p><p>drwxrw-r-x 2 <strong>root root</strong> 5 Sept 1 16:09 redrock   <strong>文件所属用户 文件所属用户组</strong></p><p><strong>d</strong>rwxrw-r-x 2 root root 5 Sept 1 16:09 redrock   <strong>类型标志位</strong>  <strong>d&#x2F;-&#x2F;s</strong>  代表文件夹、普通文件、软链接</p><p>d<strong>rwx</strong>rw-r-x 2 root root 5 Sept 1 16:09 redrock  <strong>所有者权限</strong></p><p>drwx**rw-**r-x 2 root root 5 Sept 1 16:09 redrock  <strong>所有组权限</strong></p><p>drwxrw-<strong>r-x</strong> 2 root root 5 Sept 1 16:09 redrock   <strong>其他人权限</strong></p><h2 id="Linux文件权限管理"><a href="#Linux文件权限管理" class="headerlink" title="Linux文件权限管理"></a>Linux文件权限管理</h2><p>•对于一个文件夹来说，如果一个用户没有文件夹的执行权限(x)，则改用无法进入该文件夹</p><p>•使用命令<strong>chmod</strong>改变文件权限 </p><p>chmod  u+x  redrock</p><p>chmod  766  redrock</p><p>读取 r    4     二进制：100</p><p>写入 w   2     二进制：010</p><p>执行 x    1     二进制：001</p><p>•使用命令<strong>chown</strong>可以更改文件所属用户或同时修改所属用户和所属组</p><p>  chown root redrock   更改文件redrock的所属用户为root</p><p>  chown root:redrocker redrock  更改文件redrock的所属用户为root所属组为redrocker</p><p>•使用命令<strong>chgrp</strong>，可以单独修改文件所属组</p><p>   chgrp redrocker redrock    更改文件redrock的所属用户组为toot   </p><h1 id="账户管理——添加用户"><a href="#账户管理——添加用户" class="headerlink" title="账户管理——添加用户"></a>账户管理——添加用户</h1><h3 id="•添加新的用户账号使用useradd命令，其语法如下："><a href="#•添加新的用户账号使用useradd命令，其语法如下：" class="headerlink" title="•添加新的用户账号使用useradd命令，其语法如下："></a>•添加新的用户账号使用useradd命令，其语法如下：</h3><p>-c comment 指定一段注释性描述。</p><p>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p><p>-g 用户组 指定用户所属的用户组。</p><p>-G 用户组，用户组 指定用户所属的附加组。</p><p>-s Shell文件 指定用户的登录Shell。</p><p>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p><h1 id="账户管理—删除和修改"><a href="#账户管理—删除和修改" class="headerlink" title="账户管理—删除和修改"></a>账户管理—删除和修改</h1><h3 id="1-删除帐号"><a href="#1-删除帐号" class="headerlink" title="1.删除帐号"></a>1.删除帐号</h3><p>•  如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将&#x2F;etc&#x2F;passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>•删除一个已有的用户账号使用userdel命令，其格式如下：</p><p>•userdel 选项 用户名</p><p>•常用的选项是 -r，它的作用是把用户的主目录一起删除。</p><h3 id="2-修改帐号"><a href="#2-修改帐号" class="headerlink" title="2. 修改帐号"></a>2. 修改帐号</h3><p>•修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。修改已有用户的信息使用usermod命令，其格式如下：</p><p>•usermod 选项 用户名</p><p>•常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>•另外，有些系统可以使用选项：-l 新用户名</p><p>1、&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。Linux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。这个文件对所有用户都是可读的。</p><p>•文件具体含义：<em>用户名</em>*:<strong>口令</strong>:<strong>用户标识号</strong>(UID):<strong>组标识号</strong>(GID):<strong>注释性描述</strong>:<strong>主目录</strong>:<strong>登录</strong>Shell*</p><p>•其中口令字段，由于采用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符“x”</p><p>2、用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</p><p>•文件具体含义：<em>组名</em>*:<strong>口令</strong>:<strong>组标识号</strong>:*<em>组内用户列表</em></p><h1 id="账户管理—删除和修改-1"><a href="#账户管理—删除和修改-1" class="headerlink" title="账户管理—删除和修改"></a>账户管理—删除和修改</h1><h3 id="增加一个新的用户组使用groupadd命令。其格式如下："><a href="#增加一个新的用户组使用groupadd命令。其格式如下：" class="headerlink" title="增加一个新的用户组使用groupadd命令。其格式如下："></a>增加一个新的用户组使用groupadd命令。其格式如下：</h3><p>•groupadd 选项 用户组</p><p>•可以使用的选项有：</p><p>•-g GID 指定新用户组的组标识号（GID）。</p><p>•-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</p><h3 id="如果要删除一个已有的用户组，使用groupdel命令，其格式如下："><a href="#如果要删除一个已有的用户组，使用groupdel命令，其格式如下：" class="headerlink" title="如果要删除一个已有的用户组，使用groupdel命令，其格式如下："></a>如果要删除一个已有的用户组，使用groupdel命令，其格式如下：</h3><p>•groupdel 用户组</p><h3 id="修改用户组的属性使用groupmod命令。其语法如下："><a href="#修改用户组的属性使用groupmod命令。其语法如下：" class="headerlink" title="修改用户组的属性使用groupmod命令。其语法如下："></a>修改用户组的属性使用groupmod命令。其语法如下：</h3><p>•groupmod 选项 用户组</p><p>•常用的选项有：</p><p>•-g GID 为用户组指定新的组标识号。</p><p>•-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</p><p>•-n新用户组 将用户组的名字改为新名字</p><h1 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h1><h3 id="•在-Linux-中，有预设的三个输入输出流："><a href="#•在-Linux-中，有预设的三个输入输出流：" class="headerlink" title="•在 Linux 中，有预设的三个输入输出流："></a>•在 Linux 中，有预设的三个输入输出流：</h3><p>1.标准输入流 stdin</p><p>2.标准输出流 stdout</p><p>3.标准错误流 stderr</p><p>•shell 中我们也可以进行流的重定向：</p><p>•使用 <strong>&gt;</strong>  将程序的标准输出写入到某个文件</p><p>•使用 <strong>&gt;&gt;</strong>  将程序的标准输出追加写入到某个文件</p><p>•使用 <strong>&lt;</strong>  将某个文件作为程序的标准输入</p><p>•使用 <strong>2&gt;</strong>  将程序的标准错误输出写入到某个文件</p><p>•使用 <strong>2&gt;&gt;</strong> 将程序的标准错误输出追加写入到某个文件</p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>•有时候，我们希望将多个命令组合起来来完成某些任务。</p><p>•在 shell 中，管道是达成这个目标的理想工具。它将上一个命令的标准输出流和下一个命令的标准输入流连接起来。</p><p>•管道符号为 |，并且管道可以链式使用。</p><h1 id="后台任务"><a href="#后台任务" class="headerlink" title="后台任务"></a>后台任务</h1><p>•在命令结尾附加“&amp;”，即可让任务转入后台运行。</p><p>•Shell 退出时，会杀死所有后台任务。</p><p>•前台命令运行时，可以使用 Ctrl+Z 将命令挂起，然后使用 bg 命令即可使其转入后台运行。</p><p>•使用 fg 命令可以将后台命令转回前台执行。</p><p>•如果没有其它配置，后台任务仍然会向前台终端写入输出，可以使用 jobs 来查看。</p><p>•如果希望后台任务不被杀死，可以使用 nohup 运行程序，也可以对已经在后台执行的任务 disown。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进入终端：点击鼠标右键再点击Open-Terminals&quot;&gt;&lt;a href=&quot;#进入终端：点击鼠标右键再点击Open-Terminals&quot; class=&quot;headerlink&quot; title=&quot;进入终端：点击鼠标右键再点击Open Terminals&quot;&gt;&lt;/a&gt;进入</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CQUPT Sre 2023 winter assessment re1</title>
    <link href="http://example.com/2023/03/09/CQUPT-Sre-2023-winter-assessment-re1/"/>
    <id>http://example.com/2023/03/09/CQUPT-Sre-2023-winter-assessment-re1/</id>
    <published>2023-03-09T13:09:52.000Z</published>
    <updated>2023-03-10T14:57:10.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>我先查壳发现是32位，无壳。</p><p><img src="/pic/202303091.jpg" alt="查壳"></p><p>拖到idapro，进去找到main函数，然后反汇编，发现是一连串if语句，然后果断把跳转汇编nop掉</p><p><img src="/pic/202303092.jpg" alt="第一次尝试"></p><p>猛然发现，竟然找我要flag，那就老老实实从头分析。哭死。</p><h3 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h3><p>之后看了一下hint，知道了要改花指令。重新打开文件，发现反汇编代码标红， nop掉花指令  (写wp时用了新程序，所以没有注释和修改，但我做题的时候写了蛮多的)</p><p><img src="/pic/202303093.png" alt="nop花指令"></p><p>Sub_401210是base64变表加密，用原数组异或0x64得到新表(别问，问就是一个一个敲的（其实这里可以用shift+E可以快速获得数据）</p><p><img src="/pic/202303094.jpg" alt="xor"></p><p>所以第一部分： flag{w3lCOm3</p><p> (这个在线网站真的好好用，一看到有关crypto的立马打开它，所以redrock为什么美没有crypto考核呢？感 觉做那个很有意思)</p><p><img src="/pic/202303095.jpg" alt="part1flag"></p><h3 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h3><p>第二部分去花后再查看，一开始没去花的时候还以为出错题了，害。其实此处的dword_BA5000在静态观察时跟进的值并不一样，因为在main函数第一行就已经对其进行赋值了</p><p><img src="/pic/202303096.jpg" alt="lookfor"></p><p>之后发现Dword_BA5000和unk_405057异或结果无意义，跟进调试</p><p><img src="/pic/202303097.jpg" alt="跟进"></p><p>就得到第二部分： <em>7O_redrOck</em>_</p><h3 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h3><p>第三部分(((unsigned __int8)a1[3] ^ 0xCC) &lt;&lt; 24) | ((a1[2] ^ 0x1E) &lt;&lt; 16) | ((a1[1] ^ 0x12) &lt;&lt; 8) | *a1 ，也就是a1四个字节经过运算的结果逆序排列并拼成一个三十二位数，即0xB17B6035</p><p> (这里看了好几天，一开始真的很难理解好嘛，你看看上面的句子，我一口气都读不完。之后写了个语 句来解题， hint上的仿照写一个应该是这个意思，寻思着不写一个也懒得搞出来啊。这题出的真的很好 哎)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x35</span>)+<span class="built_in">chr</span>(<span class="number">0x60</span>^<span class="number">0x12</span>)+<span class="built_in">chr</span>(<span class="number">0x7B</span>^<span class="number">0x1E</span>)+<span class="built_in">chr</span>(<span class="number">0xB1</span>^<span class="number">0xCC</span>))</span><br></pre></td></tr></table></figure><p>输出得到第三部分： 5re}</p><h3 id="最终flag"><a href="#最终flag" class="headerlink" title="最终flag"></a>最终flag</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;w3lCOm3_7O_redrOck_5re&#125;</span><br></pre></td></tr></table></figure><p> (写了整整十天，熬了三次通宵 ……泪目了好嘛)</p><p><img src="/pic/202303098.jpg" alt="flag"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这次考核我真的….害，好几次崩溃。就这一题我想死的心都有了，但做完发现确实不难，还是我自己技 术不行。也是第一次了解到花指令，然后上网搜了搜花指令的形成与去除还有加入花指令目的等等。然 后发现re跟crypto的联系真的蛮紧密的，做re的时候就像解密一样，都要一层层观察发现。最后的那一 段简直要了我的狗命！！！然后无意间发现了与它类似的的题目，当时本来都打算放弃了，然后我就索 性把语句拿去直接搜，搜到了一个类似的题目，然后有了灵感。反正以后尽量别遇到这种。呸，还是要遇到，遇到多了就无所谓了。还是要慢慢学。如果这篇wp有什么不详细的地方也可以随时联系我，我进 行修改。别问为什么不写re2和pwn，问就是不想做！就是叛逆！还有那个植物大战僵尸，那个sp壳是 什么意思啊(凶狠语气)，根本不知道怎么脱(生吃了出题人的表情)，是不是玩不起！(有了想线下 砸红岩网校的冲动)我甚至都打不开游戏！咳咳，我劝出题人耗子尾汁！不然直接掏出九转大肠给出题 人加餐！怕了吧！(得意的表情)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;re1&quot;&gt;&lt;a href=&quot;#re1&quot; class=&quot;headerlink&quot; title=&quot;re1&quot;&gt;&lt;/a&gt;re1&lt;/h2&gt;&lt;p&gt;我先查壳发现是32位，无壳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/202303091.jpg&quot; alt=&quot;查壳&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>SB早操</title>
    <link href="http://example.com/2023/03/09/SB%E6%97%A9%E6%93%8D/"/>
    <id>http://example.com/2023/03/09/SB%E6%97%A9%E6%93%8D/</id>
    <published>2023-03-09T10:51:04.000Z</published>
    <updated>2023-03-09T11:06:38.448Z</updated>
    
    <content type="html"><![CDATA[<p>我真是服了，为什么偏要有早操这种东西！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我真是服了，为什么偏要有早操这种东西！&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="重邮" scheme="http://example.com/tags/%E9%87%8D%E9%82%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/03/07/hello-world/"/>
    <id>http://example.com/2023/03/07/hello-world/</id>
    <published>2023-03-07T14:47:23.353Z</published>
    <updated>2023-03-07T14:47:23.353Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
