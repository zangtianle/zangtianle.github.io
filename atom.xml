<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaoMao&#39;s Blog</title>
  
  <subtitle>cat???</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-07T10:02:47.201Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MaoMao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我不是病毒2.0_复现</title>
    <link href="http://example.com/2023/04/07/%E6%88%91%E4%B8%8D%E6%98%AF%E7%97%85%E6%AF%922-0-%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2023/04/07/%E6%88%91%E4%B8%8D%E6%98%AF%E7%97%85%E6%AF%922-0-%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-04-07T09:58:07.000Z</published>
    <updated>2023-04-07T10:02:47.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Phi-Calculator-py"><a href="#Phi-Calculator-py" class="headerlink" title="Phi_Calculator.py"></a>Phi_Calculator.py</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># GLOBALS --v</span></span><br><span class="line">arcane_loop_trial = <span class="literal">True</span></span><br><span class="line">jump_into_full = <span class="literal">False</span></span><br><span class="line">full_version_code = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">username_trial = <span class="string">&quot;vishwaCTF&quot;</span></span><br><span class="line">bUsername_trial = <span class="string">b&quot;vishwaCTF&quot;</span></span><br><span class="line"></span><br><span class="line">key_part_static1_trial = <span class="string">&quot;VishwaCTF&#123;m4k3_it_possibl3_&quot;</span></span><br><span class="line">key_part_dynamic1_trial = <span class="string">&quot;xxxxxxxx&quot;</span></span><br><span class="line">key_part_static2_trial = <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">key_full_template_trial = key_part_static1_trial + key_part_dynamic1_trial + key_part_static2_trial</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_key</span>(<span class="params">key, username_trial</span>):</span><br><span class="line">    <span class="keyword">global</span> key_full_template_trial</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) != <span class="built_in">len</span>(key_full_template_trial):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Check static base key part --v</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> key_part_static1_trial:</span><br><span class="line">            <span class="keyword">if</span> key[i] != c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># TODO : test performance on toolbox container</span></span><br><span class="line">        <span class="comment"># Check dynamic part --v</span></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">4</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">5</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">3</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">6</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">7</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[i] != hashlib.sha256(username_trial).hexdigest()[<span class="number">8</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>题目一开始的字符串格式就为flag的样子，在第四的变量key_full_template_trial可以看到下方调用的函数，跟进在check_key函数中，进行逆向分析，写出解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">username_trial = <span class="string">b&quot;vishwaCTF&quot;</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;VishwaCTF&#123;m4k3_it_possibl3_&#x27;</span></span><br><span class="line"></span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">4</span>]</span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">5</span>]</span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">3</span>]</span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">6</span>]</span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">2</span>]</span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">7</span>]</span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">1</span>]</span><br><span class="line">key += hashlib.sha256(username_trial).hexdigest()[<span class="number">8</span>]</span><br><span class="line">key += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><h1 id="Reversing-is-Ezeeee…"><a href="#Reversing-is-Ezeeee…" class="headerlink" title="Reversing is Ezeeee…."></a>Reversing is Ezeeee….</h1><p>使用 extractor.py 提取文件，脚本见 <code>https://github.com/extremecoders-re/pyinstxtractor/blob/master/pyinstxtractor.py</code></p><p>我用的是pyinstxtractor.py，在github上下载源码，复制到须拆包文件所在文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py 须拆包exe</span><br></pre></td></tr></table></figure><p>拆开包之后，要找到 Main，可能一般和软件同名？</p><p>用pycdc解pyc文件，patch即可得到结果</p><p>pycdc使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pycdc 文件名.pyc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VishwaCTF&#123;15_pyth0n_th3_b35t_l4ngu4g3??&#125;</span><br></pre></td></tr></table></figure><h1 id="我不是病毒2-0"><a href="#我不是病毒2-0" class="headerlink" title="我不是病毒2.0"></a>我不是病毒2.0</h1><p>用IDA打开文件，可以看到很多_MEIPASS2字节，该文件被python打包，用pyinstxtractor.py解包，跟进</p><p><img src="/pic/image-20230407162839005.png" alt="image-20230407162839005"></p><p>先解密main.pyc，可以看到指向了sign，但sign.pyc.encrypted为加密文件。继续解密其他文件。可以看到“archive.pyc就是加密的过程，crypto_key是加密的密钥，而我们需要解密.pyz文件”</p><p>所以分别反编译两个文件，可以找到CRYPT_BLOCK_SIZE &#x3D; 16，加密方式是AES</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sign</span><br><span class="line">sign.main()</span><br></pre></td></tr></table></figure><p><img src="/pic/image-20230407172012430.png" alt="image-20230407172012430"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key = &#x27;HelloHiHowAreYou&#x27;</span><br></pre></td></tr></table></figure><p>编写解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"> </span><br><span class="line">CRYPT_BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从crypt_key.pyc获取key，也可自行反编译获取</span></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">&#x27;HelloHiHowAreYou&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">inf = <span class="built_in">open</span>(<span class="string">&#x27;sign.pyc.encrypted&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="comment"># 打开加密文件</span></span><br><span class="line">outf = <span class="built_in">open</span>(<span class="string">&#x27;sign.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="comment"># 输出文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 按加密块大小进行读取</span></span><br><span class="line">iv = inf.read(CRYPT_BLOCK_SIZE)</span><br><span class="line"> </span><br><span class="line">cipher = tinyaes.AES(key, iv)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 补pyc头(最后自己补也行)</span></span><br><span class="line"></span><br><span class="line">outf.write(<span class="string">b&#x27;\x6F\x0D\x0D\x0A\x00\x00\x00\x00\x70\x79\x69\x30\x10\x01\x00\x00&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 写入解密数据</span></span><br><span class="line">outf.write(plaintext)</span><br><span class="line"> </span><br><span class="line">inf.close()</span><br><span class="line">outf.close()</span><br></pre></td></tr></table></figure><p><img src="/pic/image-20230407172521160.png" alt="image-20230407172521160"></p><p>可以看到sign.pyc文件，继续解密该文件</p><p><img src="/pic/image-20230407172529621.png" alt="image-20230407172529621"></p><p>应该是编码方式不一样，跟学长显示的不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import hashlib as 娌堥槼</span><br><span class="line">import base64 as 鏉窞</span><br><span class="line">import ctypes as 铓屽煚</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    铓屽煚.windll.kernel32.VirtualAlloc.restype = 铓屽煚.c_void_p</span><br><span class="line">    绂忓缓 = input(&#x27;\xe6\x82\xa8\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x9a&#x27;)</span><br><span class="line">    澶╂触 = &#x27;9K98jTmDKCXlg9E2kepX4nAi8H0DB57IU57ybV37xjrw2zutw+KnxkoYur3IZzi2ep5tDC6jimCJ7fDpgQ5F3fJu4wHA0LVq9FALbjXN6nMy57KrU8DEloh+Cji3ED3eEl5YWAyb8ktBoyoOkL1c9ASWUPBniHmD7RSqWcNkykt/USjhft9+aV930Jl5VjD6qcXyZTfjnY5MH3u22O9NBEXLj3Y9N5VjEgF2cFJ+Tq7jj92iIlEkNvx8Jl+eH5/hipsonKLTnoLGXs4a0tTQX/uXQOTMBbtd70x04w1Pa0fp+vA9tCw+DXvXj0xmX8c5HMybhpPrwQYDonx7xtS+vRIj/OmU7GxkHOOqYdsGmGdTjTAUEBvZtinOxuR7mZ0r9k+c9da0W93TWm5+2LKNR6OJjmILaJn0lq4foYcfD5+JITDsOD6Vg01yLRG1B4A6OxJ7Rr/DBUabSu2fYf1c4sTFvWgfMV8il6QfJiNMGkVLey1cBPSobenMo+TQC1Ql0//9M4P01sOiwuuVKLvTyDEv6dKO//muVL9S2gq/aZUBWkjj/I5rUJ6Mlt4+jsngmuke9plAjw22fUgz+8uSzn40dhKXfBX/BOCnlwWsMGAefAfoz/XAsoVSG2ioLFmlcYe/WBgaUJEoRUSyv73yiEOTVwIK6EPnDlwRgZZHx2toLu8udpEZ0aKGkex5sn7P8Jf9AbD4/EiQU+FdoJSxGorPSZGvrc4=&#x27;</span><br><span class="line">    鍖椾含 = 娌堥槼.md5(&#x27;\xe4\xba\x91\xe5\x8d\x97&#x27;.encode(&#x27;utf-8&#x27;)).hexdigest()</span><br><span class="line">    閲嶅簡 = 鏉窞.b64decode(澶╂触)</span><br><span class="line">    娌冲崡 = b&#x27;&#x27;</span><br><span class="line">    鍖椾含_len = len(鍖椾含)</span><br><span class="line">    骞垮窞 = list(range(256))</span><br><span class="line">    j = 0</span><br><span class="line">    for i in range(256):</span><br><span class="line">        j = (j + 骞垮窞[i] + ord(鍖椾含[i % 鍖椾含_len])) % 256</span><br><span class="line">        骞垮窞[i] = 骞垮窞[j]</span><br><span class="line">        骞垮窞[j] = 骞垮窞[i]</span><br><span class="line">    灞变笢 = 闄曡タ = 0</span><br><span class="line">    for 娌冲寳 in 閲嶅簡:</span><br><span class="line">        灞变笢 = (灞变笢 + 1) % 256</span><br><span class="line">        闄曡タ = (闄曡タ + 骞垮窞[灞变笢]) % 256</span><br><span class="line">        骞垮窞[灞变笢] = 骞垮窞[闄曡タ]</span><br><span class="line">        骞垮窞[闄曡タ] = 骞垮窞[灞变笢]</span><br><span class="line">        娌冲崡 += bytes([</span><br><span class="line">            娌冲寳 ^ 骞垮窞[(骞垮窞[灞变笢] + 骞垮窞[闄曡タ]) % 256]])</span><br><span class="line">    鍥涘窛 = 铓屽煚.create_string_buffer(绂忓缓.encode())</span><br><span class="line">    榛戦緳姹?= 铓屽煚.windll.kernel32.VirtualAlloc(铓屽煚.c_int(0), 铓屽煚.c_int(len(娌冲崡)), 铓屽煚.c_int(12288), 铓屽煚.c_int(64))</span><br><span class="line">    铓屽煚.windll.kernel32.RtlMoveMemory(铓屽煚.c_void_p(榛戦緳姹?, (铓屽煚.c_ubyte * len(娌冲崡)).from_buffer(bytearray(娌冲崡)), 铓屽煚.c_size_t(len(娌冲崡)))</span><br><span class="line">    杈藉畞 = 铓屽煚.windll.kernel32.CreateThread(铓屽煚.c_int(0), 铓屽煚.c_int(0), 铓屽煚.c_void_p(榛戦緳姹?, 铓屽煚.byref(鍥涘窛), 铓屽煚.c_int(0), 铓屽煚.pointer(铓屽煚.c_int(0)))</span><br><span class="line">    铓屽煚.windll.kernel32.WaitForSingleObject(铓屽煚.c_int(杈藉畞), 铓屽煚.c_int(-1))</span><br><span class="line">    if 鍥涘窛.raw == b&#x27;\xdb\x1b\x00Dy\\C\xcc\x90_\xca.\xb0\xb7m\xab\x11\x9b^h\x90\x1bl\x19\x01\x0c\xeduP6\x0c0\x7f\xc5E-L\xb0\xfb\xba\xf6\x9f\x00&#x27;:</span><br><span class="line">        print(&#x27;\xe6\x98\xaf\xe7\x9a\x84\xef\xbc\x81\xe4\xbd\xa0\xe5\xbe\x97\xe5\x88\xb0\xe4\xba\x86\xef\xbc\x81&#x27;)</span><br><span class="line">        return None</span><br><span class="line">    None(&#x27;\xe4\xb8\x8d\xef\xbc\x8c\xe5\x86\x8d\xe5\xb0\x9d\xe8\xaf\x95\xe6\x9b\xb4\xe5\xa4\x9a\xe3\x80\x82 \xef\xbc\x88\xe7\xac\x91\xe8\x84\xb8\xe7\xac\xa6\xe5\x8f\xb7\xef\xbc\x89&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line">    return None</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先用密钥初始化RC4的S盒，然后RC4解密shellcode，加载shellcode对输入进行处理</p><p>解密shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;9K98jTmDKCXlg9E2kepX4nAi8H0DB57IU57ybV37xjrw2zutw+KnxkoYur3IZzi2ep5tDC6jimCJ7fDpgQ5F3fJu4wHA0LVq9FALbjXN6nMy57KrU8DEloh+Cji3ED3eEl5YWAyb8ktBoyoOkL1c9ASWUPBniHmD7RSqWcNkykt/USjhft9+aV930Jl5VjD6qcXyZTfjnY5MH3u22O9NBEXLj3Y9N5VjEgF2cFJ+Tq7jj92iIlEkNvx8Jl+eH5/hipsonKLTnoLGXs4a0tTQX/uXQOTMBbtd70x04w1Pa0fp+vA9tCw+DXvXj0xmX8c5HMybhpPrwQYDonx7xtS+vRIj/OmU7GxkHOOqYdsGmGdTjTAUEBvZtinOxuR7mZ0r9k+c9da0W93TWm5+2LKNR6OJjmILaJn0lq4foYcfD5+JITDsOD6Vg01yLRG1B4A6OxJ7Rr/DBUabSu2fYf1c4sTFvWgfMV8il6QfJiNMGkVLey1cBPSobenMo+TQC1Ql0//9M4P01sOiwuuVKLvTyDEv6dKO//muVL9S2gq/aZUBWkjj/I5rUJ6Mlt4+jsngmuke9plAjw22fUgz+8uSzn40dhKXfBX/BOCnlwWsMGAefAfoz/XAsoVSG2ioLFmlcYe/WBgaUJEoRUSyv73yiEOTVwIK6EPnDlwRgZZHx2toLu8udpEZ0aKGkex5sn7P8Jf9AbD4/EiQU+FdoJSxGorPSZGvrc4=&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">bytes</span>(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">arr = base64.b64decode(cipher)    </span><br><span class="line"></span><br><span class="line">key = hashlib.md5(<span class="string">&#x27;云南&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>(key.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">cipher = ARC4.new(key)</span><br><span class="line"></span><br><span class="line">p = cipher.decrypt(<span class="built_in">bytes</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(p))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后用函数指针加载shellcode</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = &#123;</span><br><span class="line"><span class="number">81</span>, <span class="number">232</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">72</span>, <span class="number">129</span>, <span class="number">193</span>, <span class="number">97</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">229</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">236</span>, <span class="number">104</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">77</span>, <span class="number">152</span>, <span class="number">199</span>, <span class="number">69</span>, <span class="number">252</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">233</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">252</span>, <span class="number">193</span>, <span class="number">224</span>, <span class="number">4</span>, <span class="number">72</span>, <span class="number">152</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">85</span>, <span class="number">152</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">1</span>, <span class="number">219</span>, <span class="number">186</span>, <span class="number">51</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">219</span>, <span class="number">186</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">160</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">255</span>, <span class="number">238</span>, <span class="number">221</span>, <span class="number">204</span>, <span class="number">187</span>, <span class="number">170</span>, <span class="number">153</span>, <span class="number">136</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">239</span>, <span class="number">205</span>, <span class="number">171</span>, <span class="number">144</span>, <span class="number">120</span>, <span class="number">86</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">176</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">186</span>, <span class="number">220</span>, <span class="number">254</span>, <span class="number">33</span>, <span class="number">67</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">9</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">184</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">64</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">192</span>, <span class="number">187</span>, <span class="number">111</span>, <span class="number">171</span>, <span class="number">119</span>, <span class="number">3</span>, <span class="number">124</span>, <span class="number">235</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">184</span>, <span class="number">239</span>, <span class="number">190</span>, <span class="number">173</span>, <span class="number">222</span>, <span class="number">13</span>, <span class="number">240</span>, <span class="number">173</span>, <span class="number">11</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">199</span>, <span class="number">69</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">235</span>, <span class="number">127</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">224</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">176</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">77</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">232</span>, <span class="number">10</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">193</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">184</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">224</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">160</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">77</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">194</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">232</span>, <span class="number">10</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">193</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">208</span>, <span class="number">72</span>, <span class="number">41</span>, <span class="number">69</span>, <span class="number">216</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">69</span>, <span class="number">200</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">125</span>, <span class="number">200</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">134</span>, <span class="number">118</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">85</span>, <span class="number">232</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">69</span>, <span class="number">240</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">16</span>, <span class="number">144</span>, <span class="number">131</span>, <span class="number">69</span>, <span class="number">252</span>, <span class="number">1</span>, <span class="number">131</span>, <span class="number">125</span>, <span class="number">252</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">142</span>, <span class="number">197</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">196</span>, <span class="number">104</span>, <span class="number">93</span>, <span class="number">89</span>, <span class="number">19</span>, <span class="number">45</span>, <span class="number">239</span>, <span class="number">197</span>, <span class="number">133</span>, <span class="number">72</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">107</span>, <span class="number">151</span>, <span class="number">30</span>, <span class="number">51</span>, <span class="number">174</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">61</span>, <span class="number">1</span>, <span class="number">135</span>, <span class="number">228</span>, <span class="number">208</span>, <span class="number">161</span>, <span class="number">110</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">206</span>, <span class="number">249</span>, <span class="number">238</span>, <span class="number">144</span>, <span class="number">92</span>, <span class="number">65</span>, <span class="number">174</span>, <span class="number">91</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">186</span>, <span class="number">214</span>, <span class="number">131</span>, <span class="number">243</span>, <span class="number">10</span>, <span class="number">63</span>, <span class="number">162</span>, <span class="number">60</span>, <span class="number">255</span>, <span class="number">167</span>, <span class="number">103</span>, <span class="number">240</span>, <span class="number">110</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">131</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">175</span>, <span class="number">5</span>, <span class="number">27</span>, <span class="number">91</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">55</span>, <span class="number">133</span>, <span class="number">233</span>, <span class="number">252</span>, <span class="number">61</span>, <span class="number">193</span>, <span class="number">245</span>, <span class="number">231</span>, <span class="number">61</span>, <span class="number">59</span>, <span class="number">227</span>, <span class="number">129</span>, <span class="number">22</span>, <span class="number">225</span>, <span class="number">192</span>, <span class="number">43</span>, <span class="number">104</span>, <span class="number">237</span>, <span class="number">12</span>, <span class="number">203</span>, <span class="number">161</span>, <span class="number">134</span>, <span class="number">59</span>, <span class="number">150</span>, <span class="number">195</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">233</span>, <span class="number">200</span>, <span class="number">247</span>, <span class="number">163</span>, <span class="number">104</span>, <span class="number">183</span>, <span class="number">40</span>, <span class="number">98</span>, <span class="number">202</span>, <span class="number">104</span>, <span class="number">230</span>, <span class="number">204</span>, <span class="number">147</span>, <span class="number">157</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">119</span>, <span class="number">147</span>, <span class="number">46</span>, <span class="number">155</span>, <span class="number">235</span>, <span class="number">94</span>, <span class="number">213</span>, <span class="number">116</span>, <span class="number">152</span>, <span class="number">199</span>, <span class="number">174</span>, <span class="number">139</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">248</span>, <span class="number">253</span>, <span class="number">19</span>, <span class="number">93</span>, <span class="number">75</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">251</span>, <span class="number">201</span>, <span class="number">193</span>, <span class="number">54</span>, <span class="number">64</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">145</span>, <span class="number">20</span>, <span class="number">125</span>, <span class="number">35</span>, <span class="number">174</span>, <span class="number">155</span>, <span class="number">130</span>, <span class="number">10</span>, <span class="number">139</span>, <span class="number">197</span>, <span class="number">132</span>, <span class="number">41</span>, <span class="number">205</span>, <span class="number">74</span>, <span class="number">219</span>, <span class="number">102</span>, <span class="number">67</span>, <span class="number">16</span>, <span class="number">221</span>, <span class="number">44</span>, <span class="number">3</span>, <span class="number">204</span>, <span class="number">94</span>, <span class="number">136</span>, <span class="number">122</span>, <span class="number">119</span>, <span class="number">231</span>, <span class="number">48</span>, <span class="number">112</span>, <span class="number">43</span>, <span class="number">57</span>, <span class="number">105</span>, <span class="number">91</span>, <span class="number">184</span>, <span class="number">10</span>, <span class="number">128</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">73</span>, <span class="number">52</span>, <span class="number">164</span>, <span class="number">22</span>, <span class="number">59</span>, <span class="number">254</span>, <span class="number">165</span>, <span class="number">105</span>, <span class="number">223</span>, <span class="number">237</span>, <span class="number">58</span>, <span class="number">180</span>, <span class="number">94</span>, <span class="number">129</span>, <span class="number">143</span>, <span class="number">114</span>, <span class="number">73</span>, <span class="number">61</span>, <span class="number">210</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">115</span>, <span class="number">85</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">PVOID p = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(p, shellcode, <span class="built_in">sizeof</span>(shellcode));</span><br><span class="line">((<span class="built_in">void</span>(__stdcall*)())(p))();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/pic/image-20230407175148405.png" alt="image-20230407175148405"></p><p>用IDA打开，找到main函数</p><p><img src="/pic/image-20230407175353875.png" alt="image-20230407175353875"></p><p>进入shellcode函数</p><p><img src="/pic/image-20230407175528922.png" alt="image-20230407175528922"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Phi-Calculator-py&quot;&gt;&lt;a href=&quot;#Phi-Calculator-py&quot; class=&quot;headerlink&quot; title=&quot;Phi_Calculator.py&quot;&gt;&lt;/a&gt;Phi_Calculator.py&lt;/h1&gt;&lt;figure class</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界——debug_WP</title>
    <link href="http://example.com/2023/04/02/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-debug-WP/"/>
    <id>http://example.com/2023/04/02/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-debug-WP/</id>
    <published>2023-04-02T06:28:32.000Z</published>
    <updated>2023-04-02T06:33:23.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻防世界——debug"><a href="#攻防世界——debug" class="headerlink" title="攻防世界——debug"></a>攻防世界——debug</h1><p>PE32无壳。用IDA打开，一整个呆住，后来搜了一下，这是**.net文件调试不能用IDA<strong>。连夜去下载</strong>Dnspy**</p><p><img src="/pic/202304021.png" alt="ida"></p><p>用Dnspy打开找到主函数。没学过C#和java，所以这个根本看不懂，想到了题目为debug，所以果断尝试动调。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private static void ᜀ(string[] A_0)</span><br><span class="line">&#123;</span><br><span class="line">string b = null;</span><br><span class="line">string value = string.Format(&quot;&#123;0&#125;&quot;, DateTime.Now.Hour + 1);</span><br><span class="line">string a_ = &quot;CreateByTenshine&quot;;</span><br><span class="line">.(a_, Convert.ToInt32(value), ref b);</span><br><span class="line">string a = Console.ReadLine();//从控制台读取输入</span><br><span class="line">if (a == b)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(&quot;u got it!&quot;);</span><br><span class="line">Console.ReadKey(true);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(&quot;wrong&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Console.ReadKey(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动调"><a href="#动调" class="headerlink" title="动调"></a>动调</h2><p>因为在if判断后输出结果，所以只需查看a,b的值即可，在此处下断点调试</p><p><img src="/pic/202304022.png" alt="debug"></p><p>可以看到b中直接出现了flag</p><p><img src="/pic/202304023.png" alt="flag"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;967DDDFBCD32C1F53527C221D9E40A0B&#125;</span><br></pre></td></tr></table></figure><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>之后问了学长，给出了逆向的思路（虽然也不是很懂，但是先记下来）。</p><p>首先分析第一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string value = string.Format(&quot;&#123;0&#125;&quot;, DateTime.Now.Hour + 1);</span><br></pre></td></tr></table></figure><p>DataTime.Now——获取当前的时间；.Hour——获取当前小时；其次+1，并将值赋给value.</p><p>然后调用class0下的成员函数smethod_2，传入a_，然后把value转换成int32</p><p><img src="/pic/202304024.jpg" alt="smethod_2"></p><p>然后这个smethod_2，中间调用了smethod_0函数，跟进。smethod_0就是指数数组加密，然后smethod_1是加上flag{}还有对中间的字符进行MD5加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private static void ᜀ(string A_0, int A_1, ref string A_2)</span><br><span class="line">&#123;</span><br><span class="line">int num = 0;</span><br><span class="line">if (0 &lt; A_0.Length)</span><br><span class="line">&#123;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">char c = A_0[num];</span><br><span class="line">int num2 = 1;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">c = Convert.ToChar(ᜅ.ᜀ(Convert.ToInt32(c), num2));</span><br><span class="line">num2++;</span><br><span class="line">&#125;</span><br><span class="line">while (num2 &lt; 15);</span><br><span class="line">A_2 += c;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">while (num &lt; A_0.Length);</span><br><span class="line">&#125;</span><br><span class="line">A_2 = ᜅ.ᜀ(A_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static string ᜀ(string A_0)</span><br><span class="line">&#123;</span><br><span class="line">byte[] bytes = Encoding.ASCII.GetBytes(A_0);</span><br><span class="line">return &quot;flag&#123;&quot; + BitConverter.ToString(new MD5CryptoServiceProvider().ComputeHash(bytes)).Replace(&quot;-&quot;, &quot;&quot;) + &quot;&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private static int ᜀ(int A_0, int A_1)</span><br><span class="line">&#123;</span><br><span class="line">return (new int[]</span><br><span class="line">&#123;</span><br><span class="line">2,</span><br><span class="line">3,</span><br><span class="line">5,</span><br><span class="line">7,</span><br><span class="line">11,</span><br><span class="line">13,</span><br><span class="line">17,</span><br><span class="line">19,</span><br><span class="line">23,</span><br><span class="line">29,</span><br><span class="line">31,</span><br><span class="line">37,</span><br><span class="line">41,</span><br><span class="line">43,</span><br><span class="line">47,</span><br><span class="line">53,</span><br><span class="line">59,</span><br><span class="line">61,</span><br><span class="line">67,</span><br><span class="line">71,</span><br><span class="line">73,</span><br><span class="line">79,</span><br><span class="line">83,</span><br><span class="line">89,</span><br><span class="line">97,</span><br><span class="line">101,</span><br><span class="line">103,</span><br><span class="line">107,</span><br><span class="line">109,</span><br><span class="line">113</span><br><span class="line">&#125;)[A_1] ^ A_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后发现我的dnSpy显示界面跟学长显示的不一样，我的函数没有显示出来，所以只能动调。虽然代码显示有问题，但我还是把各个对于函数找到了，然后写一下解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">key=[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>]</span><br><span class="line">s=<span class="string">&quot;CreateByTenshine&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> key:</span><br><span class="line">i=<span class="built_in">chr</span>(n^<span class="built_in">ord</span>(i))</span><br><span class="line">flag+=i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span>+hashlib.md5(flag.encode()).hexdigest()+<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;967dddfbcd32c1f53527c221d9e40a0b&#125;</span><br></pre></td></tr></table></figure><h1 id="关于-net-and-C"><a href="#关于-net-and-C" class="headerlink" title="关于.net and C#"></a>关于.net and C#</h1><p><strong>在这直接引用搜到的一段话：</strong></p><p>众所周知，C#语言是对JAVA语言系统的升华。汇集JAVA面向对象的思想，同时也将微软传统MSVC&#x2F;VC++的优点发挥的淋漓尽致。跟JAVA类似，C#也是一种解释型语言，编译完同样会生成字节码文件，在程序运行时，借助它自己的解释器进行实时解释运行。C#的字节码中间语言称为IL语言，其解释器一般是指CLR，类比于JAVA的JVM。当然，C#的解释器不限于CLR，现阶段开源软件Mono也实现了一个C#解释器。而且，Mono不仅能运行在Windows上，还能运行在Linux上。不过Mono本来就是为了在Linux上运行.NET C#。</p><p>C#使用csc进行编译，编译生成的可执行文件也是exe格式文件。但不同于C&#x2F;C++编译出来的程序，使用dumpbin反编译C#的exe文件，并不能帮助我们分析程序。因为C#语言系统在C&#x2F;C++之上又抽象了一层，.text代码段虽然还能解析出部分C语言代码段，但主体逻辑都存储在IL中。所以，我们需要工具进一步来分析exe文件中的IL代码块。然后进一步解析出C#源码。</p><h2 id="net-C-逆向工具"><a href="#net-C-逆向工具" class="headerlink" title=".net C#逆向工具"></a>.net C#逆向工具</h2><table><thead><tr><th>工具</th><th>作用</th></tr></thead><tbody><tr><td>ildasm</td><td>将从exe提取出IL代码</td></tr><tr><td>ilasm</td><td>将IL代码编译成exe可执行文件</td></tr><tr><td>dotpeek</td><td>Jetbrains家族的用于反编译C#程序的工具，也可反编译为IL</td></tr><tr><td>dnSpy</td><td>顶中顶</td></tr></tbody></table><p><img src="/pic/202304025.png" alt="img"></p><h2 id="ILSPY和dnSPY的对比"><a href="#ILSPY和dnSPY的对比" class="headerlink" title="ILSPY和dnSPY的对比"></a>ILSPY和dnSPY的对比</h2><p>ILSPY更偏向静态分析，而dnSPY更偏向动态调试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攻防世界——debug&quot;&gt;&lt;a href=&quot;#攻防世界——debug&quot; class=&quot;headerlink&quot; title=&quot;攻防世界——debug&quot;&gt;&lt;/a&gt;攻防世界——debug&lt;/h1&gt;&lt;p&gt;PE32无壳。用IDA打开，一整个呆住，后来搜了一下，这是**.ne</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界_babymips_WP</title>
    <link href="http://example.com/2023/03/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-babymips-WP/"/>
    <id>http://example.com/2023/03/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-babymips-WP/</id>
    <published>2023-03-25T10:53:18.000Z</published>
    <updated>2023-03-25T10:58:18.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="babymips-WP"><a href="#babymips-WP" class="headerlink" title="babymips_WP"></a>babymips_WP</h1><p>该文件为ELF32文件，<a href="https://so.csdn.net/so/search?q=MIPS&spm=1001.2101.3001.7020">MIPS</a>指令集，用IDA打开，找到主函数，F5反编译</p><p><img src="/pic/2023032501.png" alt="反编译"></p><p>可以看到第一步是对输入的v5进行操作，先不急着分析，继续跟进函数sub_4007F0</p><p><img src="/pic/2023032502.png" alt="sub_4007F0"></p><p>经过一个for循环后的值等于off_410D04，跟进该数列，shift+E提取该数列的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unsigned char ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  0x52, 0xFD, 0x16, 0xA4, 0x89, 0xBD, 0x92, 0x80, 0x13, 0x41, </span><br><span class="line">  0x54, 0xA0, 0x8D, 0x45, 0x18, 0x81, 0xDE, 0xFC, 0x95, 0xF0, </span><br><span class="line">  0x16, 0x79, 0x1A, 0x15, 0x5B, 0x75, 0x1F</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来一句一句分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">5</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )<span class="comment">//这一句就是一个for循环</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( (i &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">//这里的i&amp;1等价于判断奇偶，这是写题时第一个比较懵的点</span></span><br><span class="line">      v1 = (a1[i] &gt;&gt; <span class="number">2</span>) | (a1[i] &lt;&lt; <span class="number">6</span>);<span class="comment">//接下来就是位运算，不是很熟悉，所以放了一点常识在后文。这里就是简单的循环右移2位</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v1 = (<span class="number">4</span> * a1[i]) | (a1[i] &gt;&gt; <span class="number">6</span>);<span class="comment">//这里是循环左移2位</span></span><br><span class="line">    a1[i] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析的差不多了，开始写解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">off_410D04 =[</span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0xFD</span>, <span class="number">0x16</span>, <span class="number">0xA4</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0x92</span>, <span class="number">0x80</span>, <span class="number">0x13</span>, <span class="number">0x41</span>,</span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0xA0</span>, <span class="number">0x8D</span>, <span class="number">0x45</span>, <span class="number">0x18</span>, <span class="number">0x81</span>, <span class="number">0xDE</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0xF0</span>,</span><br><span class="line">  <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0x1A</span>, <span class="number">0x15</span>, <span class="number">0x5B</span>, <span class="number">0x75</span>, <span class="number">0x1F</span></span><br><span class="line">]</span><br><span class="line">flag=[]</span><br><span class="line"></span><br><span class="line">h=<span class="built_in">list</span>(<span class="string">&quot;Q|j&#123;g&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(h)):</span><br><span class="line">    flag.append(<span class="built_in">ord</span>(h[i])^(<span class="number">0x20</span>-i))</span><br><span class="line"><span class="comment">#爆破</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="built_in">len</span>(off_410D04)+<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        tmp=j^(<span class="number">0x20</span>-i)</span><br><span class="line">        <span class="keyword">if</span>((i&amp;<span class="number">1</span>)!=<span class="number">0</span>):</span><br><span class="line">            res = (tmp &gt;&gt; <span class="number">2</span>) | (tmp &lt;&lt; <span class="number">6</span>)%<span class="number">0x100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = (tmp &lt;&lt; <span class="number">2</span>)% <span class="number">0x100</span> | (tmp &gt;&gt; <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">if</span> res == off_a10D04[i-<span class="number">5</span>]:</span><br><span class="line">            flag.append()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以得到flag为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qctf&#123;ReA11y_4_B@89_mlp5_4_XmAn_&#125;</span><br></pre></td></tr></table></figure><p>之后又查了网上的wp，还有一种解法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">off_410D04 =[</span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0xFD</span>, <span class="number">0x16</span>, <span class="number">0xA4</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0x92</span>, <span class="number">0x80</span>, <span class="number">0x13</span>, <span class="number">0x41</span>,</span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0xA0</span>, <span class="number">0x8D</span>, <span class="number">0x45</span>, <span class="number">0x18</span>, <span class="number">0x81</span>, <span class="number">0xDE</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0xF0</span>,</span><br><span class="line">  <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0x1A</span>, <span class="number">0x15</span>, <span class="number">0x5B</span>, <span class="number">0x75</span>, <span class="number">0x1F</span></span><br><span class="line">]</span><br><span class="line">flag=[]</span><br><span class="line"></span><br><span class="line">h=<span class="built_in">list</span>(<span class="string">&quot;Q|j&#123;g&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(h)):</span><br><span class="line">     flag.append(<span class="built_in">ord</span>(h[i])^((<span class="number">0x20</span> - i)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#逆向</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(off_410D04)):</span><br><span class="line">     <span class="keyword">if</span>((i&amp;<span class="number">1</span>)!=<span class="number">0</span>):</span><br><span class="line">          res=(off_410D04[i]&amp;<span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span> | (off_410D04[i]&amp;<span class="number">0x3</span> ) &lt;&lt; <span class="number">6</span></span><br><span class="line">     <span class="keyword">else</span>:(off_410D04[i]&amp;<span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">          res= (off_410D04[i]&amp;<span class="number">0x3f</span>) &lt;&lt; <span class="number">2</span> | (off_410D04[i]&amp;<span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span></span><br><span class="line">     flag.append(res^<span class="number">0x20</span> - i-<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始很疑惑，为什么这种解法中的0xfc,0x3,0x3f,0xc0是从哪来的，后来问了一下学长，在原函数中，第一句if中的右移2位或左移6位即实现了循环右移2位的操作。而第二句的右移6位或左移2位，则实现了循环右移6位的操作。在wp中的逆向，是分了两步位移，&amp;0xfc即取高6位，而&amp;0x3为取低2位，这样也是可以恢复的方法。</p><p>在这里放上学长的wp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> uint;</span><br><span class="line"><span class="comment">//rorate left</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T __ROL__(T value, uint count) &#123;</span><br><span class="line"><span class="type">const</span> uint nbits = <span class="built_in">sizeof</span>(T) * <span class="number">8</span>;</span><br><span class="line">count %= nbits;</span><br><span class="line"></span><br><span class="line">T high = value &gt;&gt; (nbits - count);</span><br><span class="line">value &lt;&lt;= count;</span><br><span class="line">value |= high;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rotate right</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T __ROR__(T value, uint count) &#123;</span><br><span class="line"><span class="type">const</span> uint nbits = <span class="built_in">sizeof</span>(T) * <span class="number">8</span>;</span><br><span class="line">count %= nbits;</span><br><span class="line"></span><br><span class="line">T low = value &lt;&lt; (nbits - count);</span><br><span class="line">value &gt;&gt;= count;</span><br><span class="line">value |= low;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> unk_400B98[<span class="number">33</span>] = &#123;</span><br><span class="line">   <span class="number">0x51</span>, <span class="number">0x7C</span>, <span class="number">0x6A</span>, <span class="number">0x7B</span>, <span class="number">0x67</span>, <span class="number">0x52</span>, <span class="number">0xFD</span>, <span class="number">0x16</span>, <span class="number">0xA4</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0x92</span>, <span class="number">0x80</span>, <span class="number">0x13</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0xA0</span>, <span class="number">0x8D</span>, <span class="number">0x45</span>, <span class="number">0x18</span>, <span class="number">0x81</span>,</span><br><span class="line">   <span class="number">0xDE</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0xF0</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0x1A</span>, <span class="number">0x15</span>, <span class="number">0x5B</span>, <span class="number">0x75</span>, <span class="number">0x1F</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> des1[] = <span class="string">&quot;Q|j&#123;g&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((i &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">unk_400B98[i] = __ROL__(unk_400B98[i], <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">unk_400B98[i] = __ROL__(unk_400B98[i], <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">unk_400B98[i] ^= <span class="number">32</span> - i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, unk_400B98);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="位运算（-amp-、-、-、-、-gt-gt-、-lt-lt-）"><a href="#位运算（-amp-、-、-、-、-gt-gt-、-lt-lt-）" class="headerlink" title="位运算（&amp;、|、^、~、&gt;&gt;、&lt;&lt;）"></a>位运算（&amp;、|、^、~、&gt;&gt;、&lt;&lt;）</h2><table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1</td></tr><tr><td>~</td><td>取反</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td></tr></tbody></table><h1 id="攻防世界-76号"><a href="#攻防世界-76号" class="headerlink" title="攻防世界_76号"></a>攻防世界_76号</h1><p>这道题是周六下午无聊写的。这道题还蛮有意思的，打开后找不到main函数，shift+F12查看字符串可以看到”Password”和”Correct”的字符串，跟进查看，可以看到之间有一串函数，F5跟进调试.</p><p><img src="/pic/2023032503.png" alt="F5跟进"></p><p><img src="/pic/2023032504.png" alt="string"></p><p><img src="/pic/2023032505.png" alt="F5跟进"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="keyword">sizeof</span>(v5));</span><br><span class="line">    v3 = *(a1 + themainvar);</span><br><span class="line">    v5[(v3 + <span class="number">64</span>) % <span class="number">128</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> themainvar == <span class="number">13</span> &amp;&amp; v5[<span class="number">74</span>] != <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar || !v5[<span class="number">112</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar == <span class="number">14</span> &amp;&amp; v5[<span class="number">113</span>] )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar == <span class="number">20</span> &amp;&amp; v5[<span class="number">114</span>] )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">89</span> || !v5[<span class="number">115</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">90</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">15</span> || !v5[<span class="number">116</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">14</span> || !v5[<span class="number">117</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">LABEL_12:</span><br><span class="line">        themainvar = <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">12</span> || !v5[<span class="number">118</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">5</span> || !v5[<span class="number">119</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5[<span class="number">121</span>] )</span><br><span class="line">          <span class="keyword">return</span> themainvar == <span class="number">33</span> || themainvar == <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">1</span> || !v5[<span class="number">121</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">35</span> || !v5[<span class="number">33</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">36</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">11</span> || !v5[<span class="number">34</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">32</span> || !v5[<span class="number">33</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">33</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">3</span> || !v5[<span class="number">36</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">7</span> || !v5[<span class="number">37</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !v5[<span class="number">38</span>] || themainvar != <span class="number">8</span> &amp;&amp; themainvar != <span class="number">4</span> )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_53;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> themainvar == <span class="number">12</span> &amp;&amp; v5[<span class="number">52</span>] != <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">13</span> || !v5[<span class="number">39</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">14</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">9</span> || !v5[<span class="number">41</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">10</span> || !v5[<span class="number">42</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> themainvar == <span class="number">12</span> &amp;&amp; v5[<span class="number">43</span>] != <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">19</span> || !v5[<span class="number">44</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">17</span> || !v5[<span class="number">45</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">18</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> themainvar == <span class="number">18</span> &amp;&amp; v5[<span class="number">45</span>] != <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !v5[<span class="number">46</span>] || themainvar != <span class="number">6</span> &amp;&amp; themainvar != <span class="number">28</span> )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">LABEL_53:</span><br><span class="line">        ++themainvar;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">30</span> || !v5[<span class="number">48</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">29</span> || !v5[<span class="number">49</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">20</span> || !v5[<span class="number">50</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">LABEL_15:</span><br><span class="line">        themainvar = <span class="number">21</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">25</span> || !v5[<span class="number">51</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> themainvar == <span class="number">24</span> &amp;&amp; v5[<span class="number">50</span>] != <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">26</span> || !v5[<span class="number">53</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">27</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">2</span> || !v5[<span class="number">54</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">6</span> || !v5[<span class="number">55</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">22</span> || !v5[<span class="number">56</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">23</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( themainvar != <span class="number">23</span> || !v5[<span class="number">57</span>] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        themainvar = <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> themainvar == <span class="number">21</span> &amp;&amp; v5[<span class="number">33</span>] != <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到是一大串swich-case语句，其中themainvar推动整个程序的遍历，于是手动寻找；其中5，9为LABEL_53的自加，均为f。</p><p>所以最后的flag为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;09vdf7wefijbk&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;babymips-WP&quot;&gt;&lt;a href=&quot;#babymips-WP&quot; class=&quot;headerlink&quot; title=&quot;babymips_WP&quot;&gt;&lt;/a&gt;babymips_WP&lt;/h1&gt;&lt;p&gt;该文件为ELF32文件，&lt;a href=&quot;https://so.cs</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS编程基础</title>
    <link href="http://example.com/2023/03/18/WINDOWS%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/03/18/WINDOWS%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2023-03-18T07:49:09.000Z</published>
    <updated>2023-04-01T15:31:51.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用程序分类"><a href="#应用程序分类" class="headerlink" title="应用程序分类"></a>应用程序分类</h1><table><thead><tr><th>分类</th><th></th></tr></thead><tbody><tr><td>控制台程序Console</td><td>DOS程序，本身没有窗口，通过Windows DOS窗口执行</td></tr><tr><td>窗口程序</td><td>拥有自己的窗口，可以和用户交互</td></tr><tr><td>库程序</td><td>存放代码、数据的程序，执行文件可以从中取出代码执行和获取数据</td></tr></tbody></table><p><strong>Ex</strong>：1.静态库程序：扩展名<strong>LIB</strong>，在编译连接程序时，将代码放入到执行文件中。</p><p>​        2.动态库程序：扩展名<strong>DLL</strong>，在执行文件执行时从中获取代码。</p><p>由于DOS窗口是由Windows提供，程序进程结束后，会立即将窗口回收。为了想要持续显示窗口，可以加入getchar()指令。</p><p>在一个解决方案中可能会有很多项目，但所有项目的最终文件都会显示在解决方案的Debug目录下。一个解决方案中可以有很多项目，但是只有一个启动项，所以想要编译链接其他项目，需要将此项目将设为启动项。</p><p>静态库程序没有入口函数，无法执行，最终文件无法进入内存。动态库程序有入口函数，但不能独立运行，必须依附其它程序运行</p><h2 id="应用程序对比"><a href="#应用程序对比" class="headerlink" title="应用程序对比"></a>应用程序对比</h2><table><thead><tr><th>入口函数</th><th></th></tr></thead><tbody><tr><td>控制台程序</td><td>main</td></tr><tr><td>窗口程序</td><td>WinMain</td></tr><tr><td>动态库程序</td><td>DLLMain</td></tr><tr><td>静态库程序</td><td>无入口函数</td></tr></tbody></table><table><thead><tr><th>文件存在方式</th><th></th></tr></thead><tbody><tr><td>控制台程序、窗口程序（可执行程序）</td><td>EXE文件</td></tr><tr><td>动态库程序</td><td>DLL文件</td></tr><tr><td>静态库程序</td><td>LIB文件</td></tr></tbody></table><h1 id="开发工具和库"><a href="#开发工具和库" class="headerlink" title="开发工具和库"></a>开发工具和库</h1><h2 id="编译工具"><a href="#编译工具" class="headerlink" title="编译工具"></a>编译工具</h2><table><thead><tr><th>编译工具</th><th></th></tr></thead><tbody><tr><td>编译器CL.EXE</td><td>将源代码编译成目标代码.obj</td></tr><tr><td>链接器LINK.EXE</td><td>将目标代码、库链接生成最终文件</td></tr><tr><td>资源编译器RC.EXE</td><td>（.rc)将资源编译，最终通过链接器存入最终文件</td></tr></tbody></table><p>路径：在VS安装文件夹下的\VC\bin中</p><h3 id="CL的常用选项"><a href="#CL的常用选项" class="headerlink" title="CL的常用选项"></a>CL的常用选项</h3><p>&#x2F;c 只编译不连接</p><p>&#x2F;TC 编译C文件</p><p>&#x2F;TP 编译C++文件</p><p>(如果不指定，CL会根据文件类型自动区分)</p><h3 id="链接选项"><a href="#链接选项" class="headerlink" title="链接选项"></a>链接选项</h3><p>&#x2F;out 文件名，连接成指定文件名的程序</p><p>&#x2F;LIBPATH LIB文件的存放路径</p><p>&#x2F;SUBSYSTEM CONSOLE&#x2F;WINDOW</p><h2 id="windows-h头文件"><a href="#windows-h头文件" class="headerlink" title="windows.h头文件"></a>windows.h头文件</h2><table><thead><tr><th>头文件</th><th>包含</th></tr></thead><tbody><tr><td>windef.h</td><td>定义了各种的数据类型</td></tr><tr><td>winbase.h</td><td>定义了kernel的相关函数</td></tr><tr><td>wingdi.h</td><td>定义了绘图和文字</td></tr><tr><td>winuser.h</td><td>窗口控件等函数</td></tr><tr><td>winnt.h</td><td>提供了Unicode支持</td></tr></tbody></table><p>ATL CCOMPTR头文件：#include &lt;atlbase.h&gt;</p><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><table><thead><tr><th>库</th><th>内容&#x2F;作用</th></tr></thead><tbody><tr><td>kenrnel.lib</td><td>提供进程&#x2F;线程&#x2F;内存等等API函数</td></tr><tr><td>user32.lib</td><td>包括窗口&#x2F;界面等</td></tr><tr><td>gdi32.lib</td><td>提供绘图&#x2F;文字等</td></tr></tbody></table><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><table><thead><tr><th>入口函数的部分</th><th>含义</th></tr></thead><tbody><tr><td>int WinMain(HINSTANCE hInstance,</td><td>应用程序的句柄</td></tr><tr><td>HINSTANCE hPrevInstance,</td><td>该应用程序的前一个实例的句柄，目前来说已经没意义了</td></tr><tr><td>LPSTR pSZcmdLine,</td><td>命令行参数</td></tr><tr><td>int nSHowCmd</td><td>窗口的显示方式</td></tr></tbody></table><h2 id="为编译环境准备"><a href="#为编译环境准备" class="headerlink" title="为编译环境准备"></a>为编译环境准备</h2><p>在VC98的BIN目录下VCVARS32.EXE， 将其直接拖到doc下。</p><h1 id="win32窗口函数、"><a href="#win32窗口函数、" class="headerlink" title="win32窗口函数、"></a>win32窗口函数、</h1><h2 id="入口函数-winmain"><a href="#入口函数-winmain" class="headerlink" title="入口函数 winmain"></a>入口函数 winmain</h2><h2 id="窗口处理函数"><a href="#窗口处理函数" class="headerlink" title="窗口处理函数"></a>窗口处理函数</h2><h2 id="注册窗口"><a href="#注册窗口" class="headerlink" title="注册窗口"></a>注册窗口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">BOOL MyRegister(LPSTR pszClassName)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ATOM nATOM = 0;</span><br><span class="line">WNDCLASS wc  = &#123;0&#125;;</span><br><span class="line">wc.style  = CS_VREDRAW|CS_HREDRAW;</span><br><span class="line">wc.lpfnWndProc=WndProc;</span><br><span class="line">wc.cbClsExtra  = 0;</span><br><span class="line">wc.cbWndExtra  = 0;</span><br><span class="line">wc.hInstance  = g_hInst;//WINMAIN函数传进来</span><br><span class="line">wc.hIcon  = NULL;</span><br><span class="line">wc.hCursor  = NULL;</span><br><span class="line">wc.hbrBackground=(HBRUSH)(COLOR_BTNFACE);</span><br><span class="line">wc.lpszMenuName=NULL;</span><br><span class="line">wc.lpszClassName=pszClassName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nATOM =RegisterClass(&amp;wc);</span><br><span class="line">if(0 ==nATOM)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(NULL,&quot;Register Failed&quot;,&quot;Error&quot;,MB_OK|MB_ICONWARNING);</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(NULL,&quot;Register Failed&quot;,&quot;OK&quot;,MB_OK);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typedef struct _WNDCLASS&#123;</span><br><span class="line">UINT style; //窗口类的风格</span><br><span class="line">WNDPROC lpfnWndProc;//窗口处理函数</span><br><span class="line">int cbClsExtra;//窗口类附加数据大小</span><br><span class="line">int cbWndExtra;</span><br><span class="line">HANDLE hInstance;</span><br><span class="line">HICON hIcon;</span><br><span class="line">HCURSOR hCursor;</span><br><span class="line">HBRUSH hbrBackground;</span><br><span class="line">LPCTSTR lpszMenuName;</span><br><span class="line">LPCTSTR lpszClassName;</span><br><span class="line">&#125;WNDCLASS</span><br></pre></td></tr></table></figure><h2 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h2><h2 id="显示窗口"><a href="#显示窗口" class="headerlink" title="显示窗口"></a>显示窗口</h2><p>showWindow</p><p>UpdateWindow</p><h2 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h2><p>GetMessage 获取消息</p><p>DispatchMessage 发送消息</p><h2 id="第一个简单窗口"><a href="#第一个简单窗口" class="headerlink" title="第一个简单窗口"></a>第一个简单窗口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInst =NULL;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK WndProc(HWND hWnd, //2 窗口处理函数  ,当窗口处理消息事件的时候，系统调用这个函数</span><br><span class="line">UINT nMsg,WPARAM wParam,LPARAM lParam)</span><br><span class="line">&#123;</span><br><span class="line">switch(nMsg)</span><br><span class="line">&#123;</span><br><span class="line">case WM_DESTROY:</span><br><span class="line">PostQuitMessage(0);//7 程序退出</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return DefWindowProc(hWnd,nMsg,wParam,lParam);//调用缺省的消息处理程序</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL MyRegister(LPSTR pszClassName)//3 注册窗口类型</span><br><span class="line">&#123;</span><br><span class="line">ATOM nATOM = 0;</span><br><span class="line">WNDCLASS wc  = &#123;0&#125;;</span><br><span class="line">wc.style  = CS_VREDRAW|CS_HREDRAW;</span><br><span class="line">wc.lpfnWndProc= WndProc;</span><br><span class="line">wc.cbClsExtra  = 0;</span><br><span class="line">wc.cbWndExtra  = 0;</span><br><span class="line">wc.hInstance  = g_hInst;//WINMAIN函数传进来</span><br><span class="line">wc.hIcon  = NULL;</span><br><span class="line">wc.hCursor  = NULL;</span><br><span class="line">wc.hbrBackground= (HBRUSH)(COLOR_BTNFACE);</span><br><span class="line">wc.lpszMenuName= NULL;</span><br><span class="line">wc.lpszClassName= pszClassName;</span><br><span class="line">nATOM =RegisterClass(&amp;wc);</span><br><span class="line">if(0 ==nATOM)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(NULL,&quot;Register Failed&quot;,&quot;Error&quot;,MB_OK|MB_ICONWARNING);</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(NULL,&quot;Register Successd&quot;,&quot;OK&quot;,MB_OK);</span><br><span class="line">&#125; </span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HWND MyCreate(LPSTR pszClassName)//4 窗口的创建</span><br><span class="line">&#123;</span><br><span class="line">HWND hWnd  = CreateWindow(pszClassName,&quot;HelloWindow&quot;,WS_OVERLAPPEDWINDOW,100,100,300,500,NULL,NULL,g_Inst,NULL);</span><br><span class="line">if(NULL  == hWnd)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(NULL,&quot;CreateWnd Failed&quot;,&quot;ERROR&quot;,MB_OK);</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">MessageBox(NULL,&quot;CreateWnd Successd&quot;,&quot;Successed&quot;,MB_OK);</span><br><span class="line">return hWnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//5 显示窗口</span><br><span class="line">void DisplayWnd(HWND hWnd)</span><br><span class="line">&#123;</span><br><span class="line">ShowWindow(hWnd,SW_SHOW);</span><br><span class="line">UpdateWindow(hWnd);</span><br><span class="line">&#125; </span><br><span class="line">void Message()//6 消息处理</span><br><span class="line">&#123;</span><br><span class="line">MSG msg = &#123;0&#125;;</span><br><span class="line">while(GetMessage(&amp;msg,NULL,0,0))</span><br><span class="line">&#123;</span><br><span class="line">DispatchMessage(&amp;msg);//Wndpro来处理</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int WINAPI WinMain(HINSTANCE hInstance,//1 入口函数</span><br><span class="line">HINSTANCE hPrevInstance,</span><br><span class="line">LPSTR pSZcmdLine,</span><br><span class="line">int nSHowCmd)</span><br><span class="line">&#123;</span><br><span class="line">HWND hWnd  = NULL;</span><br><span class="line">g_hInst  = hInstance; </span><br><span class="line">MyRegister(&quot;MyWnd&quot;);</span><br><span class="line">hWnd =  MyCreate(&quot;MyWnd&quot;);</span><br><span class="line">DisplayWnd(hWnd);</span><br><span class="line">Message();</span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="窗口的注册"><a href="#窗口的注册" class="headerlink" title="窗口的注册"></a>窗口的注册</h1><h2 id="窗口类"><a href="#窗口类" class="headerlink" title="窗口类"></a>窗口类</h2><p>系统全局的窗口类。比如按钮（BUTTON）、文本(“EDIT”)编辑框等。不需要注册</p><p>运用程序的全局窗口类。可以在运用程序中exe和dll所有模块中使用全局窗口类。</p><p>局部窗口类。只能在本模块中使用的窗口类。</p><h2 id="窗口类的注册"><a href="#窗口类的注册" class="headerlink" title="窗口类的注册"></a>窗口类的注册</h2><p>系统全局的窗口类，无需注册，直接使用。使用CreateWindow函数，在CLASSNAME中制定系统已经定义好的窗口类型名称即可。</p><p>应用程序的全局窗口类，需要用代码实现注册，在注册时需要增加CS_GLOBALCLASS定义实现方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WNDCLASS wc =&#123;0&#125;；</span><br><span class="line"></span><br><span class="line">   wc.style= CS_GLOBALCLASS|CS_HREDRAW...&#x27;</span><br><span class="line"></span><br><span class="line">RegisterClss(&amp;wc);</span><br></pre></td></tr></table></figure><p>局部窗口类，不能增加CS_GLOBALCLASS定义，使用 ResgisterClss和RegisterClassEx注册</p><p>CS_HREDRAW 窗口水平变化，重新绘制窗口。</p><p>CS_WREDRAW 窗口锤子变化，重新绘制窗口</p><p>CS_DBCLICK 窗口可以接受鼠标双击消息</p><p>CS_GLOBALCLASS 创建应用程序全局窗口类</p><p>CS_BYTEALIGNWINDOW 窗口对齐方式，以8的倍数对齐</p><p>CS_BYTEALIGNCLIENT 窗口客户区对齐方式</p><p>CS_CLASSDC 所有这种类型的窗口使用同一个DC</p><p>CS_OWNDC 每个串钩拥有自己的DC</p><p>CS_PARENTDC 使用父窗口的DC</p><p>CS_SAVEBITS （提高了绘图性能，消耗了资源）使用位图保存窗口界面，可以提高窗口界面的刷新性能</p><h2 id="附加数据"><a href="#附加数据" class="headerlink" title="附加数据"></a>附加数据</h2><p>在窗口的数据信息中添加自己的信息。</p><p>cbWndExtra 用于添加信息的内存的大小</p><p>SetWindowLong  将信息保存到内存中</p><p>GetWindowLong 将信息从内存中取出</p><h1 id="资源处理"><a href="#资源处理" class="headerlink" title="资源处理"></a>资源处理</h1><h2 id="资源和资源脚本"><a href="#资源和资源脚本" class="headerlink" title="资源和资源脚本"></a>资源和资源脚本</h2><p>资源：ICON&#x2F;CUSRUR&#x2F;BITMAP&#x2F;MENU</p><p>资源脚本：扩展名为rc文件</p><h2 id="编译资源"><a href="#编译资源" class="headerlink" title="编译资源"></a>编译资源</h2><p>rc.exe编译资源，生成RES文件</p><h2 id="链接资源"><a href="#链接资源" class="headerlink" title="链接资源"></a>链接资源</h2><p>使用link.exe将res文件链接到程序中</p><h2 id="ICON的使用"><a href="#ICON的使用" class="headerlink" title="ICON的使用"></a>ICON的使用</h2><p>Loadicon</p><h1 id="WIN32基本消息"><a href="#WIN32基本消息" class="headerlink" title="WIN32基本消息"></a>WIN32基本消息</h1><h3 id="WM-DESTROY"><a href="#WM-DESTROY" class="headerlink" title="WM_DESTROY"></a>WM_DESTROY</h3><p>窗口销毁时的消息，可以做退出或善后处理。</p><h3 id="WM-CREATE"><a href="#WM-CREATE" class="headerlink" title="WM_CREATE"></a>WM_CREATE</h3><p>窗口创建消息，是在窗口创建后，窗口处理函数收的第一条消息。可以在这个消息内做数据初始化&#x2F;创建子窗口。</p><h3 id="WM-SIZE"><a href="#WM-SIZE" class="headerlink" title="WM_SIZE"></a>WM_SIZE</h3><p>当窗口大小发生变化是，会受到这个消息。可以在这个消息中调整窗口布局</p><h3 id="WM-SYSCOMMAND"><a href="#WM-SYSCOMMAND" class="headerlink" title="WM_SYSCOMMAND"></a>WM_SYSCOMMAND</h3><p>系统命令消息，当点击系统菜单和按钮时，会收到。可以在这个消息中，提示用户保存数据等。</p><h3 id="WM-PAINT-绘图消息"><a href="#WM-PAINT-绘图消息" class="headerlink" title="WM_PAINT 绘图消息"></a>WM_PAINT 绘图消息</h3><h3 id="键盘消息"><a href="#键盘消息" class="headerlink" title="键盘消息"></a>键盘消息</h3><h3 id="鼠标消息"><a href="#鼠标消息" class="headerlink" title="鼠标消息"></a>鼠标消息</h3><h2 id="消息的组成和分类"><a href="#消息的组成和分类" class="headerlink" title="消息的组成和分类"></a>消息的组成和分类</h2><h3 id="消息组成"><a href="#消息组成" class="headerlink" title="消息组成"></a>消息组成</h3><p>窗口句柄  &#x2F; 消息ID  &#x2F; 消息参数（WPARAM LPARAM）</p><h3 id="消息分类"><a href="#消息分类" class="headerlink" title="消息分类"></a>消息分类</h3><h4 id="系统消息-由系统定义和使用的消息"><a href="#系统消息-由系统定义和使用的消息" class="headerlink" title="系统消息  - 由系统定义和使用的消息"></a>系统消息  - 由系统定义和使用的消息</h4><p>ex：WM_CREATE&#x2F;WM_SIZE</p><h4 id="用户定义消息-由应用程序可以自己定义和使用的消息，WM-USER-0X400"><a href="#用户定义消息-由应用程序可以自己定义和使用的消息，WM-USER-0X400" class="headerlink" title="用户定义消息  - 由应用程序可以自己定义和使用的消息，WM_USER(0X400)"></a>用户定义消息  - 由应用程序可以自己定义和使用的消息，WM_USER(0X400)</h4><p>从WM_USER 的ID开始，到0x7FFF,是用户可以自定义使用的消息</p><p>WM_APP(0X8000) - 0XBFFF：应用程序访问窗口消息ID</p><p>0XC0000  - 0xFFFF：应用程序访问消息，使用字符串注册系统产生相应消息ID</p><h4 id="用户定义消息的使用的消息"><a href="#用户定义消息的使用的消息" class="headerlink" title="用户定义消息的使用的消息"></a>用户定义消息的使用的消息</h4><p>定义自定义的消息ID: #define  WM_FIRSTMSG (WM_USER+1)</p><p>在窗口处理函数中，响应消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">switch（nMsg）</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">case WM_FIRSTMSG:</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SendMessage &#x2F; PostMessage 发送消息：SendMessage（hWnd，WM_FIRSTMSG , 0，0）;</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="消息队列-1"><a href="#消息队列-1" class="headerlink" title="消息队列"></a>消息队列</h4><p>用于存储消息的内存空间。消息在队列中先入先出</p><h4 id="消息队列的分类"><a href="#消息队列的分类" class="headerlink" title="消息队列的分类"></a>消息队列的分类</h4><p>系统消息队列：由系统维护的消息队列</p><p>应用程序消息队列（线程消息队列）：属于每个线程的各自拥有的消息队列</p><h4 id="消息和消息队列"><a href="#消息和消息队列" class="headerlink" title="消息和消息队列"></a>消息和消息队列</h4><p><strong>根据消息和消息队列的关系，将消息分为两种：</strong></p><p>队列消息：可以存放在消息队列中的消息</p><p>非队列消息：发送时不进入消息队列</p><p><strong>队列消息</strong></p><p>首先存放到消息队列当中，然后由GetMessage&#x2F;PeekMessage取出，然后进行处理。</p><p><strong>非队列消息</strong></p><p>消息直接发送给指定窗口，查找窗口的制定处理函数，返回处理结果。</p><h3 id="消息获取"><a href="#消息获取" class="headerlink" title="消息获取"></a>消息获取</h3><h4 id="消息的循环"><a href="#消息的循环" class="headerlink" title="消息的循环"></a>消息的循环</h4><p>GetMessage 从队列中获取消息 ，判断是否是WM_QUIT消息，如果是WM_QUIT消息，消息循环结束，否则继续下一步。</p><p>TransLateMessage 翻译按键消息、如果发现有按键消息，产生字符消息放入队列，继续下一步。</p><h4 id="GetMessage和PeekMessage"><a href="#GetMessage和PeekMessage" class="headerlink" title="GetMessage和PeekMessage"></a>GetMessage和PeekMessage</h4><p><strong>从线程消息中获取消息，如果找到消息，就返回消息，进行消息处理。</strong></p><p><strong>查找系统消息队列。通过向系统消息队列查询，如果找到消息，获取消息并返回消息处理</strong></p><p><strong>检查窗口需要重新绘制的范围，如果发现存在重新绘制的范围，会产生WM_PAINT消息。然后进行消息处理</strong></p><p><strong>检查WM_TIMER定时器消息，如发现已经到时的定时器，会产生WM_PAINT消息，进行消息处理。</strong></p><p><strong>执行内存管理工作。</strong></p><p><strong>根据函数不同，处理不同。</strong></p><p>GetMessage：阻塞，等候下一条消息</p><p>PeekMessage：让出控制权，交给后面的代码</p><h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>发送（send）消息  - 直接发送给指定的窗口，并等待结果</p><p>投递（Post）消息  - 发送到消息队列中，立刻返回，由消息循环处理</p><h4 id="PostMessage-和SendMessage"><a href="#PostMessage-和SendMessage" class="headerlink" title="PostMessage 和SendMessage"></a>PostMessage 和SendMessage</h4><p>PostMessage产生队列消息，由于发送后不等候消息处理结果，所以不能确定消息是否被处理成功</p><p>SendMessage产生非消息队列消息，可以确定消息是否处理成功</p><h2 id="WM-PAINT消息"><a href="#WM-PAINT消息" class="headerlink" title="WM_PAINT消息"></a>WM_PAINT消息</h2><h3 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h3><p>由于窗口的互相覆盖等，产生需要重新绘制的区域，那么会产生WM_PAINT消息。一般情况下，不直接发送WM_PAINT消息，通过声明需要绘制区域，来产生WM_PAINT消息。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果一个消息队列中，有多个WM_PAINT消息，只有最后一个WM_PAINT消息会被处理</p><p>WM_PAINT消息处理中，要清空需要被绘制的区域。BeginPaint</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>WM_PAINT 开始时，必须调用BeginPaint</p><p>绘制图形</p><p>WM_PAINT 处理后，必须调用EndPaint</p><h2 id="键盘消息-1"><a href="#键盘消息-1" class="headerlink" title="键盘消息"></a>键盘消息</h2><h3 id="按键消息"><a href="#按键消息" class="headerlink" title="按键消息"></a>按键消息</h3><p>WM_KEYDOWN 当键被按下时产生</p><p>WM_KEYUP 当键被释放时产生</p><p>WM_SYSKEYDOWN 当系统键被按下时产生  ALT&#x2F;F10</p><p>WM_SYSKEYUP 当系统键释放时产生</p><h3 id="字符消息"><a href="#字符消息" class="headerlink" title="字符消息"></a>字符消息</h3><p>WM_CHAR 当有字符键被按下时产生</p><p> TranslateMessage会将WM_KEYDOWN 消息中，可以显示的按键，转换成WM_CHAR消息。</p><h3 id="消息参数"><a href="#消息参数" class="headerlink" title="消息参数"></a>消息参数</h3><p>WPARAM - 虚拟键码</p><p>PARAM -  相关的按键信息</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>当有按键消息时，首先进入系统消息队列</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用程序分类&quot;&gt;&lt;a href=&quot;#应用程序分类&quot; class=&quot;headerlink&quot; title=&quot;应用程序分类&quot;&gt;&lt;/a&gt;应用程序分类&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>EASYHOOK_WP</title>
    <link href="http://example.com/2023/03/18/EASYHOOK-WP/"/>
    <id>http://example.com/2023/03/18/EASYHOOK-WP/</id>
    <published>2023-03-18T07:42:27.000Z</published>
    <updated>2023-03-18T07:49:55.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EASYHOOK-wp"><a href="#EASYHOOK-wp" class="headerlink" title="EASYHOOK_wp"></a>EASYHOOK_wp</h1><p>这道题是上周末被压力下写的。这是俺第一次见到hook题，题目中也有很多API，看着真的很火大。</p><p>直接打开文件查看伪C代码。</p><p><img src="/pic/20230318131140222.png" alt="反汇编"></p><p>一开始可以注意到，sub_401240是对NumberOfBytesWritten进行的操作，因为之后的if中有输出flag的标志，所以先跟进此函数。</p><p><img src="/pic/image-202303182.png" alt="sub_401240"></p><p>可以注意到这一句代码v4[a1 - v4 + result] &#x3D;&#x3D; v4[result]，真的很无语，根本不知道这在干嘛，之后问了学长知道这是HOOK，所以直接放弃这个函数，从头开始分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  scanf(aPleaseInputFla);</span><br><span class="line">  scanf(&quot;%31s&quot;, Buffer);</span><br><span class="line">  if ( strlen(Buffer) == 19 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_401220();//未知函数</span><br><span class="line">    FileA = CreateFileA(FileName, 0x40000000u, 0, 0, 2u, 0x80u, 0);//创建文件</span><br><span class="line">    WriteFile(FileA, Buffer, 0x13u, &amp;NumberOfBytesWritten, 0);//写入内容，都是些API</span><br><span class="line">    sub_401240(Buffer, &amp;NumberOfBytesWritten);//判断以输出flag，但之前验证了这是个HOOK</span><br><span class="line">    if ( NumberOfBytesWritten == 1 )</span><br><span class="line">      scanf(aRightFlagIsYou);</span><br><span class="line">    else</span><br><span class="line">      scanf(aWrong);</span><br><span class="line">    system(Command);</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    scanf(aWrong);</span><br><span class="line">    system(Command);</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先跟进第一个未知函数，可以看到很多很多API，真的想死，一个一个查了很久</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CurrentProcessId = GetCurrentProcessId();//API获取进程ID，就是当前程序的ID</span><br><span class="line">hProcess = OpenProcess(0x1F0FFFu, 0, CurrentProcessId);//API返回现有进程的句柄。</span><br><span class="line">LibraryA = LoadLibraryA(LibFileName);//API将指定的可执行模块映射到调用进程的地址空间，这里LibFileName跟进存入的是kernel32.dll模块，就是导入了它</span><br><span class="line">WriteFile_0 = GetProcAddress(LibraryA, ProcName);//API返回指定的导出动态链接库（DLL）函数的地址。 ProcName存放的是WriteFile函数名，也就是导入WriteFile函数。</span><br><span class="line">lpAddress = WriteFile_0;//获取WriteFile函数地址</span><br><span class="line">if ( !WriteFile_0 )//kernel32.dll模块的WriteFile函数一定存在</span><br><span class="line">  return scanf(&amp;unk_40A044);//&amp;unk_40A044处的字符串是获取原API入口地址出错</span><br><span class="line">unk_40C9B4 = *lpAddress;//获取WriteFile函数的地址</span><br><span class="line">*(&amp;unk_40C9B4 + 4) = *(lpAddress + 4);</span><br><span class="line">byte_40C9BC = -23;//这里转十六进制是E9，也就是JMP的机器码指令</span><br><span class="line">dword_40C9BD = sub_401080 - lpAddress - 5;//这里是一个偏移地址，最重要的是两个关键变量在内存上是连续的。语句解释为“偏移地址=目标地址-当前地址-5”(就是E9这条指令的长度，jmp和其后四位地址共占5个字节)。所以前面直接用E9，这里直接用偏移地址就省去编译生成机器码那一步,也就是HOOK的原型。</span><br><span class="line">return sub_4010D0();//未知函数，继续跟进</span><br></pre></td></tr></table></figure><p>跟进sub_4010D0,全是API，真的好麻烦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v1 = 0;</span><br><span class="line">VirtualProtectEx(hProcess, lpAddress, 5u, 4u, &amp;flOldProtect);//VirtualProtectEx(进程，修改地址，修改区域大小，[修改其中权限，1，2，4对应执行，写，读]，一个保存修改前权限的变量)，这三行作用是对lpAddress所存储的地址处进行了5字节的权限修改操作，先改成读写再往此处写入以前面E9 偏移量地址处的5个字节（即上面的跳板指令），最后恢复权限，完成修改。</span><br><span class="line">WriteProcessMemory(hProcess, lpAddress, &amp;byte_40C9BC, 5u, 0);</span><br><span class="line">return VirtualProtectEx(hProcess, lpAddress, 5u, flOldProtect, &amp;v1);</span><br></pre></td></tr></table></figure><p>这里执行到WriteFile函数的时候就会变成一个跳转语句，跳转到目标地址sub_401080处，跟进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int v5; // ebx</span><br><span class="line"></span><br><span class="line">v5 = sub_401000(lpBuffer, nNumberOfBytesToWrite);//目标函数</span><br><span class="line">sub_401140();//重写WriteFile函数地址处的内存，和前面4010D0处函数的三句类似,只是代码 WriteProcessMemory(hProcess, lpAddress, &amp;unk_40C9B4, 5u, 0);写入的地址为&amp;unk_40C9B4,这的确是WriteFile函数地址,就是为了下面那个WriteFile函数不受影响,真正是写入文件函数</span><br><span class="line">WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);</span><br><span class="line">if ( v5 )</span><br><span class="line">  *lpNumberOfBytesWritten = 1;//这里*lpNumberOfBytesWritten已经赋值为1了，也是全局变量,会发现主函数的sub_401240(input_flag, &amp;NumberOfBytesWritten);这个hook函数就算对不上数组字符也不会设置*lpNumberOfBytesWritten = 0；所以只要这里真正加密的对了，后面错误退出*lpNumberOfBytesWritten还是等于1，所以只需继续跟进目标函数，使return 1即可</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><p>跟进sub_401000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">for ( i = 0; i &lt; a2; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  if ( i == 18 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(a1 + 18) ^= 0x13u;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    if ( i % 2 )</span><br><span class="line">      v3 = *(i + a1) - i;</span><br><span class="line">    else</span><br><span class="line">      v3 = *(i + a1 + 2);</span><br><span class="line">    *(i + a1) = i ^ v3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">v4 = 0;</span><br><span class="line">if ( a2 &lt;= 0 )</span><br><span class="line">  return 1;</span><br><span class="line">v5 = 0;</span><br><span class="line">while ( byte_40A030[v5] == *(v5 + a1) )</span><br><span class="line">&#123;</span><br><span class="line">  v5 = ++v4;</span><br><span class="line">  if ( v4 &gt;= a2 )</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><p>写解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="built_in">list</span>(<span class="string">&quot;fffffffffffffffffff&quot;</span>)</span><br><span class="line">s1=[<span class="number">0x61</span>, <span class="number">0x6A</span>, <span class="number">0x79</span>, <span class="number">0x67</span>, <span class="number">0x6B</span>, <span class="number">0x46</span>, <span class="number">0x6D</span>, <span class="number">0x2E</span>, <span class="number">0x7F</span>, <span class="number">0x5F</span>, <span class="number">0x7E</span>, <span class="number">0x2D</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x7B</span>, <span class="number">0x38</span>, <span class="number">0x6D</span>, <span class="number">0x4C</span>, <span class="number">0x6E</span>]</span><br><span class="line">flag[<span class="number">18</span>]=<span class="built_in">chr</span>(s1[<span class="number">18</span>]^<span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    v3=s1[i]^i</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">        flag[i]=<span class="built_in">chr</span>(v3+i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag[i+<span class="number">2</span>]=<span class="built_in">chr</span>(v3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Ho0k_w1th_Fun&#125;</span><br></pre></td></tr></table></figure><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>这种“简单题”其实写了我蛮久的，但我之前确实没有接触过API和hook题，第一次见也算是积攒经验了。其实这道题继续往后看，可以发现CreateFileA-&gt;WriteFile(ipAddress中的地址)&#x2F;sub_401080-&gt;sub_401240。所以最后都会访问到sub_401240这个hook函数。之后上网搜了一下wp来解释这个函数。</p><p>在这个函数中，由于在目标函数中赋值，nNumberOfBytesToWrite无论怎么操作，最后都会使程序输出you flag is right!</p><p>改为动调跟进循环。其实直接F5就能看到目标函数，疑惑了。这个循环运行第一次就退出来了，但是依旧输出you flag is right!</p><p>从一个.cpp文件变成.exe文件经过了预处理、编译、汇编、链接。</p><p>钩子函数：钩子函数是在一个事件触发的时候，在系统中捕获到他，然后做一些操作。是一段用于处理系统消息的程序。“钩子”这个意思就是在某个阶段给你一个做某些处理的机会。它是一个函数，在系统消息触发时被系统调用；且不是用户自己触发的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EASYHOOK-wp&quot;&gt;&lt;a href=&quot;#EASYHOOK-wp&quot; class=&quot;headerlink&quot; title=&quot;EASYHOOK_wp&quot;&gt;&lt;/a&gt;EASYHOOK_wp&lt;/h1&gt;&lt;p&gt;这道题是上周末被压力下写的。这是俺第一次见到hook题，题目中也有很</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>buuctf_reverse_wp</title>
    <link href="http://example.com/2023/03/10/buuctf-reverse-wp/"/>
    <id>http://example.com/2023/03/10/buuctf-reverse-wp/</id>
    <published>2023-03-10T15:04:12.000Z</published>
    <updated>2023-03-25T11:00:07.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p>可以说是最入门入门入门的题了！</p><p>先把文件拖进die，PE64文件，拖进ida，一进去就看到了flag</p><p><img src="/pic/202303101.png" alt="flag"></p><p>flag{this_Is_a_EaSyRe}</p><h1 id="reverse-1"><a href="#reverse-1" class="headerlink" title="reverse_1"></a>reverse_1</h1><p>下载好文件之后拖进die，是PE64文件，拖进ida</p><p>一进去可以看到{hello_world}，但拿去buu发现不对，于是查看字符串，跟进</p><p><img src="/pic/202303103.png" alt="跟进"></p><p>可以看到只要与str2相同就行，所以看懂上面对str2进行的操作，把’o’换成’0’即可</p><p><img src="/pic/202303102.png" alt="进行操作"></p><p>flag{hell0_w0rld}</p><h1 id="reserve-2"><a href="#reserve-2" class="headerlink" title="reserve_2"></a>reserve_2</h1><p>拖进die，看到是elf64文件，拖进ida找到main函数，反编译</p><p><img src="/pic/202303104.png" alt="lookfor"></p><p>点进flag可以看到{hacking_for_fun}</p><p><img src="/pic/202303105.png" alt="cheatflag"></p><p>但对flag进行了操作，所以写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&quot;&#123;hacking_for_fun&#125;&quot;</span></span><br><span class="line">flag1=<span class="built_in">list</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span>(flag[i]==<span class="string">&#x27;i&#x27;</span>)<span class="keyword">or</span>(flag[i]==<span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">        flag1[i]=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span>.join(flag1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{hack1ng_fo1_fun}</p><h1 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h1><p>下载下来文件，拖进ide，是PE32文件，拖进ida</p><p>打开看到</p><p><img src="/pic/202303106.png" alt="lookfor"></p><p>{49d3c93df25caad81232130f3d2ebfad}即为flag </p><p>flag{49d3c93df25caad81232130f3d2ebfad}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;easyre&quot;&gt;&lt;a href=&quot;#easyre&quot; class=&quot;headerlink&quot; title=&quot;easyre&quot;&gt;&lt;/a&gt;easyre&lt;/h1&gt;&lt;p&gt;可以说是最入门入门入门的题了！&lt;/p&gt;
&lt;p&gt;先把文件拖进die，PE64文件，拖进ida，一进去就看到了f</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本语法</title>
    <link href="http://example.com/2023/03/10/Linux%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2023/03/10/Linux%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2023-03-10T14:59:19.000Z</published>
    <updated>2023-03-25T11:00:21.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进入终端：点击鼠标右键再点击Open-Terminals"><a href="#进入终端：点击鼠标右键再点击Open-Terminals" class="headerlink" title="进入终端：点击鼠标右键再点击Open Terminals"></a>进入终端：点击鼠标右键再点击Open Terminals</h1><p>ls：查看当前目录下的文件和文件夹   即list的缩写，列出文件和文件夹  注意：在Linux系统下，在文件名或者文件夹名前加点号(如.config)会隐藏该文件，这时候我们可以使用ls -a看到所有文件，包括被隐藏的文件或文件夹）</p><p>cd：切换文件路径，进入某个文件夹  即change directory，改变工作目录  （cd ..回到上一级目录）</p><p>pwd：查看当前工作目录  即Print Working Directory的缩写</p><p>通过在键盘点击上下可以在命令行中显示你曾经输入过的指令（在命令行中输入history查看最近输入的指令）</p><p>一般来说虚拟机里复制键是shift+ctrl+c，粘贴键是shift+ctrl+v</p><p>对某个文件输入命令时按下tab键可以补全文件名</p><p>mkdir：新建文件夹  make directory的缩写</p><p>touch: 创建文本文件</p><p>rm：删除指定文件  remove的缩写</p><p>#rm -r：删除指定文件夹</p><p>##rm -rf &#x2F;*：删库跑路(很可能跑不掉)</p><p> cp：复制 cp &lt;文件路径&gt; &lt;目标路径&gt;</p><p>mv：移动文件或修改文件名（根据第二个参数决定是移动文件还是修改文件名）</p><p>mv yyz.txt 233.txt    #重命名yyz.txt为 233.txt</p><p>mv 233.txt ..        #将文件 a.txt移动到上一级目录中</p><p>tar -zxvf 文件名   解压命令，相信如果同学们按照我的教程装过vm tool的话对它已经很熟悉了。</p><p>clear  顾名思义，清屏命令</p><p>cmatrix：伪装大haker</p><h1 id="vim一般有6种工作模式"><a href="#vim一般有6种工作模式" class="headerlink" title="vim一般有6种工作模式"></a>vim一般有6种工作模式</h1><h5 id="普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。"><a href="#普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。" class="headerlink" title="普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。"></a>普通模式：使用vim打开一个文件时默认模式，也叫命令模式，允许用户通过各种命令浏览代码、滚屏等操作。</h5><h5 id="插入模式：也可以叫做编辑模式，在普通模式下敲击-i-、a-或-o-就进入插入模式，允许用户通过键盘输入、编辑。"><a href="#插入模式：也可以叫做编辑模式，在普通模式下敲击-i-、a-或-o-就进入插入模式，允许用户通过键盘输入、编辑。" class="headerlink" title="插入模式：也可以叫做编辑模式，在普通模式下敲击 i 、a 或 o 就进入插入模式，允许用户通过键盘输入、编辑。"></a>插入模式：也可以叫做编辑模式，在普通模式下敲击 i 、a 或 o 就进入插入模式，允许用户通过键盘输入、编辑。</h5><h5 id="命令行模式：在普通模式下，先输入冒号-，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到-x2F-etc-x2F-vim-x2F-vimrc配置文件中，每次打开默认配置执行。"><a href="#命令行模式：在普通模式下，先输入冒号-，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到-x2F-etc-x2F-vim-x2F-vimrc配置文件中，每次打开默认配置执行。" class="headerlink" title="命令行模式：在普通模式下，先输入冒号:，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到&#x2F;etc&#x2F;vim&#x2F;vimrc配置文件中，每次打开默认配置执行。"></a>命令行模式：在普通模式下，先输入冒号:，接着输入命令，就可以通过配置命令对vim进行配置了，如改变颜色主题、显示行号等，这些配置命令也可以保存到&#x2F;etc&#x2F;vim&#x2F;vimrc配置文件中，每次打开默认配置执行。</h5><h5 id="可视化模式：在普通模式下敲击前盘上的-v-键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。"><a href="#可视化模式：在普通模式下敲击前盘上的-v-键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。" class="headerlink" title="可视化模式：在普通模式下敲击前盘上的 v 键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。"></a>可视化模式：在普通模式下敲击前盘上的 v 键，就进入可视化模式，然后移动光标就可以选中一块文本，常用来完成文本的复制、粘贴、删除等操作。</h5><h5 id="替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。"><a href="#替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。" class="headerlink" title="替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。"></a>替换模式：如果我们想修改某个字符，不需要先进入插入模式，删除，然后再输入新的字符，直接在普通模式下，敲击R键就可以直接替换。</h5><h5 id="EX模式：类似于命令行模式，可以一次运行多个命令"><a href="#EX模式：类似于命令行模式，可以一次运行多个命令" class="headerlink" title="EX模式：类似于命令行模式，可以一次运行多个命令"></a>EX模式：类似于命令行模式，可以一次运行多个命令</h5><h5 id="vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。"><a href="#vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。" class="headerlink" title="vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。"></a>vim的各种工作模式可以通过不同的键进行切换，用户统一使用ESC键返回到普通模式。</h5><h1 id="Man-Page-常用操作"><a href="#Man-Page-常用操作" class="headerlink" title="Man Page 常用操作"></a>Man Page 常用操作</h1><h4 id="Man常用的快捷键："><a href="#Man常用的快捷键：" class="headerlink" title="Man常用的快捷键："></a>Man常用的快捷键：</h4><p>•q 退出</p><p>•Enter 按行下翻</p><p>•Space|f 按页下翻</p><p>•b 上翻一页</p><p>•h 查看帮助文档</p><h4 id="Man常用的命令："><a href="#Man常用的命令：" class="headerlink" title="Man常用的命令："></a>Man常用的命令：</h4><p>•g [n] 跳转到第一行|跳转到第n行</p><p>•G 跳转到最后一行</p><p>•&#x2F;搜索内容：</p><p>•n 跳转到下一个匹配的搜索</p><p>•N 跳转到上一个匹配的搜索</p><h3 id="Man-page的分类"><a href="#Man-page的分类" class="headerlink" title="Man page的分类"></a>Man page的分类</h3><h4 id="man总共有9种分类"><a href="#man总共有9种分类" class="headerlink" title="man总共有9种分类"></a>man总共有9种分类</h4><h5 id="越小的分类其查找时默认优先度越高"><a href="#越小的分类其查找时默认优先度越高" class="headerlink" title="越小的分类其查找时默认优先度越高"></a>越小的分类其查找时默认优先度越高</h5><p>1.可执行程序或shell命令</p><p>2.系统调用(内核提供的函数)   </p><p>3.库调用（库提供的函数）</p><p>4.特殊文件（通常位于&#x2F;dev）</p><p>5.文件格式和约定，如&#x2F;etc&#x2F;passwd</p><p>6.游戏</p><p>7.杂项（包括宏包和规范如man(7))</p><p>8.系统管理命令，只针对root用户</p><p>9.内核例程</p><h5 id="有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令"><a href="#有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令" class="headerlink" title="有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令"></a>有时存在属于不同种类但是同名的情况，如manpath命令即是一个文件格式又是一个执行命令</h5><p>解决方法：</p><p> man manpath.1</p><p> man manpath.5</p><p>即 man xxxx.index</p><h1 id="Linux根目录"><a href="#Linux根目录" class="headerlink" title="Linux根目录"></a>Linux根目录</h1><h5 id="x2F-bin-此目录存放所有用户的命令"><a href="#x2F-bin-此目录存放所有用户的命令" class="headerlink" title="&#x2F;bin   此目录存放所有用户的命令"></a>&#x2F;bin   此目录存放所有用户的命令</h5><h5 id="x2F-boot-Linux内核及引导系统程序所需的文件"><a href="#x2F-boot-Linux内核及引导系统程序所需的文件" class="headerlink" title="&#x2F;boot   Linux内核及引导系统程序所需的文件"></a>&#x2F;boot   Linux内核及引导系统程序所需的文件</h5><h5 id="x2F-dev-所有设备文件的目录（如声卡、磁盘、光驱）"><a href="#x2F-dev-所有设备文件的目录（如声卡、磁盘、光驱）" class="headerlink" title="&#x2F;dev   所有设备文件的目录（如声卡、磁盘、光驱）"></a>&#x2F;dev   所有设备文件的目录（如声卡、磁盘、光驱）</h5><p>该目录用于访问设备，其中不仅包括了计算机的真实设备，如硬盘、网卡等设备，同时也有一些有趣的伪设备</p><p>n&#x2F;dev&#x2F;null        “黑洞”，写入的一切数据都会被丢弃</p><p>n&#x2F;dev&#x2F;random     真随机数生成器，可读取随机数据流，随机度高但是慢</p><p>n&#x2F;dev&#x2F;urandom    伪随机数，同上，但是随机度低但速度快</p><p>n&#x2F;dev&#x2F;zero        “零”生成器，可以取到连续不断的0值</p><p>n&#x2F;dev&#x2F;tty  指向当前终端</p><h5 id="x2F-etc-主要存放了系统配置方面的文件"><a href="#x2F-etc-主要存放了系统配置方面的文件" class="headerlink" title="&#x2F;etc   主要存放了系统配置方面的文件"></a>&#x2F;etc   主要存放了系统配置方面的文件</h5><h5 id="x2F-home-各个用户的家目录"><a href="#x2F-home-各个用户的家目录" class="headerlink" title="&#x2F;home   各个用户的家目录"></a>&#x2F;home   各个用户的家目录</h5><h5 id="x2F-lib-库文件存放目录"><a href="#x2F-lib-库文件存放目录" class="headerlink" title="&#x2F;lib   库文件存放目录"></a>&#x2F;lib   库文件存放目录</h5><h5 id="x2F-lost-found-当系统意外崩溃或意外关机时-用于修复的文件碎片"><a href="#x2F-lost-found-当系统意外崩溃或意外关机时-用于修复的文件碎片" class="headerlink" title="&#x2F;lost+found   当系统意外崩溃或意外关机时,用于修复的文件碎片"></a>&#x2F;lost+found   当系统意外崩溃或意外关机时,用于修复的文件碎片</h5><h5 id="x2F-mnt-用于临时挂载存储设备"><a href="#x2F-mnt-用于临时挂载存储设备" class="headerlink" title="&#x2F;mnt   用于临时挂载存储设备"></a>&#x2F;mnt   用于临时挂载存储设备</h5><h5 id="x2F-var-存放内容常变动的文件目录"><a href="#x2F-var-存放内容常变动的文件目录" class="headerlink" title="&#x2F;var   存放内容常变动的文件目录"></a>&#x2F;var   存放内容常变动的文件目录</h5><h5 id="x2F-opt-自定义软件安装存放目录"><a href="#x2F-opt-自定义软件安装存放目录" class="headerlink" title="&#x2F;opt   自定义软件安装存放目录"></a>&#x2F;opt   自定义软件安装存放目录</h5><h5 id="x2F-proc-进程及内核信息存放目录。"><a href="#x2F-proc-进程及内核信息存放目录。" class="headerlink" title="&#x2F;proc   进程及内核信息存放目录。"></a>&#x2F;proc   进程及内核信息存放目录。</h5><p>该目录下一个个进程以其pid作为文件夹名放在该目录下，还有一些设备参数的读取</p><p>&#x2F;proc&#x2F;cpuinfo 本机的 CPU 的相关信息，包含频率、类型与运算功能等</p><p>&#x2F;proc&#x2F;devices 这个文件记录了系统各个主要设备的主要设备代号，与 mknod 有关</p><p>&#x2F;proc&#x2F;filesystems 目前系统已经载入的文件系统</p><p>&#x2F;proc&#x2F;version 核心的版本，就是用 uname -a 显示的内容啦！</p><h5 id="x2F-root-root用户家目录"><a href="#x2F-root-root用户家目录" class="headerlink" title="&#x2F;root   root用户家目录"></a>&#x2F;root   root用户家目录</h5><h5 id="x2F-tmp-临时文件目录"><a href="#x2F-tmp-临时文件目录" class="headerlink" title="&#x2F;tmp   临时文件目录"></a>&#x2F;tmp   临时文件目录</h5><h5 id="x2F-usr-系统存放程序的目录"><a href="#x2F-usr-系统存放程序的目录" class="headerlink" title="&#x2F;usr   系统存放程序的目录"></a>&#x2F;usr   系统存放程序的目录</h5><h5 id="x2F-sbin-给root用户使用的命令"><a href="#x2F-sbin-给root用户使用的命令" class="headerlink" title="&#x2F;sbin   给root用户使用的命令"></a>&#x2F;sbin   给root用户使用的命令</h5><h5 id="x2F-sys-系统内核参数"><a href="#x2F-sys-系统内核参数" class="headerlink" title="&#x2F;sys   系统内核参数"></a>&#x2F;sys   系统内核参数</h5><h1 id="Linux树形结构的文件系统——路径"><a href="#Linux树形结构的文件系统——路径" class="headerlink" title="Linux树形结构的文件系统——路径"></a>Linux树形结构的文件系统——路径</h1><p>为了方便地访问文件夹，我们使用一个字符串来标识对文件的访问，这个字符串就是路径。</p><p>与windows用\分割路径的方式不同，Linux下采用&#x2F;分割不同的文件夹</p><h1 id="Linux文件系统——树形结构"><a href="#Linux文件系统——树形结构" class="headerlink" title="Linux文件系统——树形结构"></a>Linux文件系统——树形结构</h1><p>•不同于windows系统采用盘符的机制来描述文件系统，Linux和macOS这类Unix系统采用挂载点的方式描述文件</p><p>•操作路径系统，通常使用树形抽象。</p><p>•只不过Linux这一棵路径树，只有一个根节点&#x2F;，</p><p>根文件系统就挂载在这根目录下面&#x2F;。</p><p>•既然没有盘符系统，那么怎么添加多个文件系</p><p>统呢？不同的文件系统，以文件夹的形式，挂载</p><p>在已有文件系统的某一个文件夹下面。</p><h1 id="Linux-链接"><a href="#Linux-链接" class="headerlink" title="Linux 链接"></a>Linux 链接</h1><p>•在Linux系统中有一种特殊的文件类型叫链接。</p><h3 id="•链接分为两种："><a href="#•链接分为两种：" class="headerlink" title="•链接分为两种："></a>•链接分为两种：</h3><h4 id="硬链接："><a href="#硬链接：" class="headerlink" title="硬链接："></a>硬链接：</h4><p>硬链接和原文件必须处于同一个文件系统，删除源文件对硬链接不会有影响，硬链接和原链接实际上是对同一份数据的两个引用，同时无法建立文件夹的硬链接。</p><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>又叫符号链接，它类似快捷方式，指向一个路径，因此可以跨文件系统建立，当原文件被删除时，软链接也无法取得数据</p><p><strong>ln [-s]</strong> <strong>原文件路径 目标文件路径</strong>  </p><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="# ls -l"></a><strong># ls -l</strong></h3><p>drwxrw-r-x <strong>2</strong> roo root 0 Sept 1 16:09 redrock   <strong>硬链接</strong>|<strong>文件数量</strong></p><p>drwxrw-r-x 2 root root <strong>5</strong> Sept 1 16:09 redrock   <strong>文件大小</strong></p><p>dwxrw-r-x 2 root root 5 <strong>Sept 1 16:09</strong> redrock   <strong>最后修改时间</strong></p><p>drwxrw-r-x 2 <strong>root root</strong> 5 Sept 1 16:09 redrock   <strong>文件所属用户 文件所属用户组</strong></p><p><strong>d</strong>rwxrw-r-x 2 root root 5 Sept 1 16:09 redrock   <strong>类型标志位</strong>  <strong>d&#x2F;-&#x2F;s</strong>  代表文件夹、普通文件、软链接</p><p>d<strong>rwx</strong>rw-r-x 2 root root 5 Sept 1 16:09 redrock  <strong>所有者权限</strong></p><p>drwx**rw-**r-x 2 root root 5 Sept 1 16:09 redrock  <strong>所有组权限</strong></p><p>drwxrw-<strong>r-x</strong> 2 root root 5 Sept 1 16:09 redrock   <strong>其他人权限</strong></p><h2 id="Linux文件权限管理"><a href="#Linux文件权限管理" class="headerlink" title="Linux文件权限管理"></a>Linux文件权限管理</h2><p>•对于一个文件夹来说，如果一个用户没有文件夹的执行权限(x)，则改用无法进入该文件夹</p><p>•使用命令<strong>chmod</strong>改变文件权限 </p><p>chmod  u+x  redrock</p><p>chmod  766  redrock</p><p>读取 r    4     二进制：100</p><p>写入 w   2     二进制：010</p><p>执行 x    1     二进制：001</p><p>•使用命令<strong>chown</strong>可以更改文件所属用户或同时修改所属用户和所属组</p><p>  chown root redrock   更改文件redrock的所属用户为root</p><p>  chown root:redrocker redrock  更改文件redrock的所属用户为root所属组为redrocker</p><p>•使用命令<strong>chgrp</strong>，可以单独修改文件所属组</p><p>   chgrp redrocker redrock    更改文件redrock的所属用户组为toot   </p><h1 id="账户管理——添加用户"><a href="#账户管理——添加用户" class="headerlink" title="账户管理——添加用户"></a>账户管理——添加用户</h1><h3 id="•添加新的用户账号使用useradd命令，其语法如下："><a href="#•添加新的用户账号使用useradd命令，其语法如下：" class="headerlink" title="•添加新的用户账号使用useradd命令，其语法如下："></a>•添加新的用户账号使用useradd命令，其语法如下：</h3><p>-c comment 指定一段注释性描述。</p><p>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p><p>-g 用户组 指定用户所属的用户组。</p><p>-G 用户组，用户组 指定用户所属的附加组。</p><p>-s Shell文件 指定用户的登录Shell。</p><p>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p><h1 id="账户管理—删除和修改"><a href="#账户管理—删除和修改" class="headerlink" title="账户管理—删除和修改"></a>账户管理—删除和修改</h1><h3 id="1-删除帐号"><a href="#1-删除帐号" class="headerlink" title="1.删除帐号"></a>1.删除帐号</h3><p>•  如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将&#x2F;etc&#x2F;passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>•删除一个已有的用户账号使用userdel命令，其格式如下：</p><p>•userdel 选项 用户名</p><p>•常用的选项是 -r，它的作用是把用户的主目录一起删除。</p><h3 id="2-修改帐号"><a href="#2-修改帐号" class="headerlink" title="2. 修改帐号"></a>2. 修改帐号</h3><p>•修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。修改已有用户的信息使用usermod命令，其格式如下：</p><p>•usermod 选项 用户名</p><p>•常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>•另外，有些系统可以使用选项：-l 新用户名</p><p>1、&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。Linux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。这个文件对所有用户都是可读的。</p><p>•文件具体含义：<em>用户名</em>*:<strong>口令</strong>:<strong>用户标识号</strong>(UID):<strong>组标识号</strong>(GID):<strong>注释性描述</strong>:<strong>主目录</strong>:<strong>登录</strong>Shell*</p><p>•其中口令字段，由于采用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符“x”</p><p>2、用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</p><p>•文件具体含义：<em>组名</em>*:<strong>口令</strong>:<strong>组标识号</strong>:*<em>组内用户列表</em></p><h1 id="账户管理—删除和修改-1"><a href="#账户管理—删除和修改-1" class="headerlink" title="账户管理—删除和修改"></a>账户管理—删除和修改</h1><h3 id="增加一个新的用户组使用groupadd命令。其格式如下："><a href="#增加一个新的用户组使用groupadd命令。其格式如下：" class="headerlink" title="增加一个新的用户组使用groupadd命令。其格式如下："></a>增加一个新的用户组使用groupadd命令。其格式如下：</h3><p>•groupadd 选项 用户组</p><p>•可以使用的选项有：</p><p>•-g GID 指定新用户组的组标识号（GID）。</p><p>•-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</p><h3 id="如果要删除一个已有的用户组，使用groupdel命令，其格式如下："><a href="#如果要删除一个已有的用户组，使用groupdel命令，其格式如下：" class="headerlink" title="如果要删除一个已有的用户组，使用groupdel命令，其格式如下："></a>如果要删除一个已有的用户组，使用groupdel命令，其格式如下：</h3><p>•groupdel 用户组</p><h3 id="修改用户组的属性使用groupmod命令。其语法如下："><a href="#修改用户组的属性使用groupmod命令。其语法如下：" class="headerlink" title="修改用户组的属性使用groupmod命令。其语法如下："></a>修改用户组的属性使用groupmod命令。其语法如下：</h3><p>•groupmod 选项 用户组</p><p>•常用的选项有：</p><p>•-g GID 为用户组指定新的组标识号。</p><p>•-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</p><p>•-n新用户组 将用户组的名字改为新名字</p><h1 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h1><h3 id="•在-Linux-中，有预设的三个输入输出流："><a href="#•在-Linux-中，有预设的三个输入输出流：" class="headerlink" title="•在 Linux 中，有预设的三个输入输出流："></a>•在 Linux 中，有预设的三个输入输出流：</h3><p>1.标准输入流 stdin</p><p>2.标准输出流 stdout</p><p>3.标准错误流 stderr</p><p>•shell 中我们也可以进行流的重定向：</p><p>•使用 <strong>&gt;</strong>  将程序的标准输出写入到某个文件</p><p>•使用 <strong>&gt;&gt;</strong>  将程序的标准输出追加写入到某个文件</p><p>•使用 <strong>&lt;</strong>  将某个文件作为程序的标准输入</p><p>•使用 <strong>2&gt;</strong>  将程序的标准错误输出写入到某个文件</p><p>•使用 <strong>2&gt;&gt;</strong> 将程序的标准错误输出追加写入到某个文件</p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>•有时候，我们希望将多个命令组合起来来完成某些任务。</p><p>•在 shell 中，管道是达成这个目标的理想工具。它将上一个命令的标准输出流和下一个命令的标准输入流连接起来。</p><p>•管道符号为 |，并且管道可以链式使用。</p><h1 id="后台任务"><a href="#后台任务" class="headerlink" title="后台任务"></a>后台任务</h1><p>•在命令结尾附加“&amp;”，即可让任务转入后台运行。</p><p>•Shell 退出时，会杀死所有后台任务。</p><p>•前台命令运行时，可以使用 Ctrl+Z 将命令挂起，然后使用 bg 命令即可使其转入后台运行。</p><p>•使用 fg 命令可以将后台命令转回前台执行。</p><p>•如果没有其它配置，后台任务仍然会向前台终端写入输出，可以使用 jobs 来查看。</p><p>•如果希望后台任务不被杀死，可以使用 nohup 运行程序，也可以对已经在后台执行的任务 disown。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进入终端：点击鼠标右键再点击Open-Terminals&quot;&gt;&lt;a href=&quot;#进入终端：点击鼠标右键再点击Open-Terminals&quot; class=&quot;headerlink&quot; title=&quot;进入终端：点击鼠标右键再点击Open Terminals&quot;&gt;&lt;/a&gt;进入</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>CQUPT Sre 2023 winter assessment re1</title>
    <link href="http://example.com/2023/03/09/CQUPT-Sre-2023-winter-assessment-re1/"/>
    <id>http://example.com/2023/03/09/CQUPT-Sre-2023-winter-assessment-re1/</id>
    <published>2023-03-09T13:09:52.000Z</published>
    <updated>2023-03-10T14:57:10.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>我先查壳发现是32位，无壳。</p><p><img src="/pic/202303091.jpg" alt="查壳"></p><p>拖到idapro，进去找到main函数，然后反汇编，发现是一连串if语句，然后果断把跳转汇编nop掉</p><p><img src="/pic/202303092.jpg" alt="第一次尝试"></p><p>猛然发现，竟然找我要flag，那就老老实实从头分析。哭死。</p><h3 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h3><p>之后看了一下hint，知道了要改花指令。重新打开文件，发现反汇编代码标红， nop掉花指令  (写wp时用了新程序，所以没有注释和修改，但我做题的时候写了蛮多的)</p><p><img src="/pic/202303093.png" alt="nop花指令"></p><p>Sub_401210是base64变表加密，用原数组异或0x64得到新表(别问，问就是一个一个敲的（其实这里可以用shift+E可以快速获得数据）</p><p><img src="/pic/202303094.jpg" alt="xor"></p><p>所以第一部分： flag{w3lCOm3</p><p> (这个在线网站真的好好用，一看到有关crypto的立马打开它，所以redrock为什么美没有crypto考核呢？感 觉做那个很有意思)</p><p><img src="/pic/202303095.jpg" alt="part1flag"></p><h3 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h3><p>第二部分去花后再查看，一开始没去花的时候还以为出错题了，害。其实此处的dword_BA5000在静态观察时跟进的值并不一样，因为在main函数第一行就已经对其进行赋值了</p><p><img src="/pic/202303096.jpg" alt="lookfor"></p><p>之后发现Dword_BA5000和unk_405057异或结果无意义，跟进调试</p><p><img src="/pic/202303097.jpg" alt="跟进"></p><p>就得到第二部分： <em>7O_redrOck</em>_</p><h3 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h3><p>第三部分(((unsigned __int8)a1[3] ^ 0xCC) &lt;&lt; 24) | ((a1[2] ^ 0x1E) &lt;&lt; 16) | ((a1[1] ^ 0x12) &lt;&lt; 8) | *a1 ，也就是a1四个字节经过运算的结果逆序排列并拼成一个三十二位数，即0xB17B6035</p><p> (这里看了好几天，一开始真的很难理解好嘛，你看看上面的句子，我一口气都读不完。之后写了个语 句来解题， hint上的仿照写一个应该是这个意思，寻思着不写一个也懒得搞出来啊。这题出的真的很好 哎)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x35</span>)+<span class="built_in">chr</span>(<span class="number">0x60</span>^<span class="number">0x12</span>)+<span class="built_in">chr</span>(<span class="number">0x7B</span>^<span class="number">0x1E</span>)+<span class="built_in">chr</span>(<span class="number">0xB1</span>^<span class="number">0xCC</span>))</span><br></pre></td></tr></table></figure><p>输出得到第三部分： 5re}</p><h3 id="最终flag"><a href="#最终flag" class="headerlink" title="最终flag"></a>最终flag</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;w3lCOm3_7O_redrOck_5re&#125;</span><br></pre></td></tr></table></figure><p> (写了整整十天，熬了三次通宵 ……泪目了好嘛)</p><p><img src="/pic/202303098.jpg" alt="flag"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这次考核我真的….害，好几次崩溃。就这一题我想死的心都有了，但做完发现确实不难，还是我自己技 术不行。也是第一次了解到花指令，然后上网搜了搜花指令的形成与去除还有加入花指令目的等等。然 后发现re跟crypto的联系真的蛮紧密的，做re的时候就像解密一样，都要一层层观察发现。最后的那一 段简直要了我的狗命！！！然后无意间发现了与它类似的的题目，当时本来都打算放弃了，然后我就索 性把语句拿去直接搜，搜到了一个类似的题目，然后有了灵感。反正以后尽量别遇到这种。呸，还是要遇到，遇到多了就无所谓了。还是要慢慢学。如果这篇wp有什么不详细的地方也可以随时联系我，我进 行修改。别问为什么不写re2和pwn，问就是不想做！就是叛逆！还有那个植物大战僵尸，那个sp壳是 什么意思啊(凶狠语气)，根本不知道怎么脱(生吃了出题人的表情)，是不是玩不起！(有了想线下 砸红岩网校的冲动)我甚至都打不开游戏！咳咳，我劝出题人耗子尾汁！不然直接掏出九转大肠给出题 人加餐！怕了吧！(得意的表情)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;re1&quot;&gt;&lt;a href=&quot;#re1&quot; class=&quot;headerlink&quot; title=&quot;re1&quot;&gt;&lt;/a&gt;re1&lt;/h2&gt;&lt;p&gt;我先查壳发现是32位，无壳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/202303091.jpg&quot; alt=&quot;查壳&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="学习记录" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>SB早操</title>
    <link href="http://example.com/2023/03/09/SB%E6%97%A9%E6%93%8D/"/>
    <id>http://example.com/2023/03/09/SB%E6%97%A9%E6%93%8D/</id>
    <published>2023-03-09T10:51:04.000Z</published>
    <updated>2023-03-09T11:06:38.448Z</updated>
    
    <content type="html"><![CDATA[<p>我真是服了，为什么偏要有早操这种东西！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我真是服了，为什么偏要有早操这种东西！&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="重邮" scheme="http://example.com/tags/%E9%87%8D%E9%82%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/03/07/hello-world/"/>
    <id>http://example.com/2023/03/07/hello-world/</id>
    <published>2023-03-07T14:47:23.353Z</published>
    <updated>2023-03-07T14:47:23.353Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
